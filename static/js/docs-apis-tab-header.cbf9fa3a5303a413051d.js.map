{"version":3,"sources":["D:/Users/jacki/Documents/GitHub/tab-group/docs/apis/TabHeader.mdx","D:/Users/jacki/Documents/GitHub/tab-group/src/components/TabHeaderContext.ts","D:/Users/jacki/Documents/GitHub/tab-group/src/components/TabListContext.ts","D:/Users/jacki/Documents/GitHub/tab-group/src/components/commons/useTabList.ts","D:/Users/jacki/Documents/GitHub/tab-group/src/components/tab-header/TabHeaderWrapper.tsx","D:/Users/jacki/Documents/GitHub/tab-group/src/components/InkBar.tsx","D:/Users/jacki/Documents/GitHub/tab-group/src/components/tab-header/TabHeaderScrollButton.tsx","D:/Users/jacki/Documents/GitHub/tab-group/src/components/tab-header/NextIcon.tsx","D:/Users/jacki/Documents/GitHub/tab-group/src/components/tab-header/PrevIcon.tsx","D:/Users/jacki/Documents/GitHub/tab-group/src/helpers/usePreventTransitionWhenMount.ts","D:/Users/jacki/Documents/GitHub/tab-group/src/components/tab-header/useInkbarPositionSync.ts","D:/Users/jacki/Documents/GitHub/tab-group/src/helpers/useEventCallback.ts","D:/Users/jacki/Documents/GitHub/tab-group/src/helpers/easeInOut.ts","D:/Users/jacki/Documents/GitHub/tab-group/src/helpers/animate.ts","D:/Users/jacki/Documents/GitHub/tab-group/src/components/tab-header/useScrollState.ts","D:/Users/jacki/Documents/GitHub/tab-group/src/components/tab-header/TabHeaderExtraContent.ts","D:/Users/jacki/Documents/GitHub/tab-group/src/components/tab-header/TabList.ts","D:/Users/jacki/Documents/GitHub/tab-group/src/components/tab-header/InnerTabHeader.tsx","D:/Users/jacki/Documents/GitHub/tab-group/src/components/tab-header/TabHeader.tsx","D:/Users/jacki/Documents/GitHub/tab-group/src/constants.ts","D:/Users/jacki/Documents/GitHub/tab-group/src/helpers/useRefValue.ts"],"names":["layoutProps","MDXLayout","MDXContent","components","props","mdxType","of","TabHeader","isMDXComponent","TabHeaderContext","React","createContext","TabListContext","useTabList","selectedIndex","useState","renderCount","setRenderCount","isRenderredRef","useRef","tabsRef","sortedTabsRef","tabsPropsRef","current","useEffect","register","useCallback","tabId","sortedTabs","currentIdx","indexOf","state","push","idx","length","unregister","tabs","tabIdx","splice","getTabs","getTabProps","useMemo","borderCss","css","TabHeaderWrapper","styled","div","borderless","topCss","InkBar","attrs","className","classNames","top","theme","transitions","create","getColorFromTheme","palette","primary","TabHeaderScrollButtonWrapper","text","breakpoint","disabled","TabHeaderScrollButton","children","rest","ref","useRipple","undefined","aria-disabled","NextIcon","focusable","viewBox","aria-hidden","role","fill","width","height","d","PrevIcon","usePreventTransitionWhenMount","elementRef","element","transition","style","rafId","requestAnimationFrame","cancelAnimationFrame","useInkbarPositionSync","inkBarRef","tabListRef","inkBar","tabList","activeTab","querySelector","getBoundingClientRect","left","containerLeft","scrollLeft","transform","useEnhancedEffect","window","useLayoutEffect","useEventCallback","fn","easeInOut","elapsed","initialValue","amountOfChange","duration","easeInOutAnimate","start","end","update","animate","useScrollState","tabListContextState","showScrollButtons","setShowScrollButtons","isPrevDisabled","setIsPrevDisabled","isNextDisabled","setIsNextDisabled","scrollBy","delta","value","updateScrollButtonsState","scrollWidth","clientWidth","scrollSelectedTabIntoView","selectedTabId","selectedTab","document","tabListRect","tabRect","right","handleResize","debounce","DEBOUNCE_WAIT","addEventListener","cancel","removeEventListener","prev","next","handleTabListScroll","onTabListScroll","TabHeaderExtraContent","fullWidthCss","TabList","fullWidth","InnerTabHeader","extraContent","inkBarColor","onClick","onScroll","data-testid","color","dense","onSelect","textColor","onSelectRef","useRefValue","context","tabIndex","event","Provider","LEFT_KEY_CODE","TOP_KEY_CODE","RIGHT_KEY_CODE","BOTTOM_KEY_CODE"],"mappings":"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","file":"static/js/docs-apis-tab-header.63908307.js","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport { Playground, Props } from 'docz';\nimport TabHeader from '../../src/components/tab-header/TabHeader';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"tabheader\"\n    }}>{`TabHeader`}</h1>\n    <Props of={TabHeader} mdxType=\"Props\" />\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","import React from 'react';\n\ninterface TabHeaderContextState {\n  /**\n   * 是否是密集模式\n   */\n  dense?: boolean;\n\n  /**\n   * 变更当前选项卡\n   */\n  onSelect: (\n    tabIndex: number,\n    event: React.MouseEvent | React.KeyboardEvent,\n  ) => void;\n  /**\n   * 标签文本颜色\n   */\n  textColor?: string;\n}\n\n/**\n * 标签头部上下文\n */\nconst TabHeaderContext = React.createContext<TabHeaderContextState | null>(\n  null,\n);\n\nexport default TabHeaderContext;\n","import React from 'react';\n\nexport interface TabProps {\n  disabled?: boolean;\n}\n\nexport interface TabListContextState {\n  /**\n   * 注册标签页\n   */\n  register: (tabId: string, props: TabProps) => number;\n  /**\n   * 取消注册标签页\n   */\n  unregister: (tabId: string) => void;\n  /**\n   * 当前选中标签页的索引。索引从 0 开始。\n   */\n  selectedIndex: number;\n  /**\n   * 获取所有标签页的id\n   */\n  getTabs(): string[];\n  getTabProps(tabId: string): TabProps;\n}\n\n/**\n * 标签列表上下文\n */\nconst TabListContext = React.createContext<TabListContextState | null>(null);\n\nexport default TabListContext;\n","import { useEffect, useState, useRef, useCallback, useMemo } from 'react';\nimport { TabProps } from '../TabListContext';\n\n/**\n * 标签页列表状态管理\n */\nfunction useTabList(selectedIndex: number) {\n  const [renderCount, setRenderCount] = useState(1); // 内部 tab 发生变化引起重绘的次数\n  const isRenderredRef = useRef(false); // 是否已经同步渲染过\n  const tabsRef = useRef<string[]>([]); // 所有包含标签页（无序的）\n  const sortedTabsRef = useRef<string[]>([]); // 包含的有序的标签页\n  const tabsPropsRef = useRef<{ [name: string]: TabProps }>({});\n  sortedTabsRef.current = []; // TODO: current mode 可能会有缺陷，参见： https://github.com/facebook/react/issues/14099\n  isRenderredRef.current = false; // TODO: current mode 可能会有缺陷，参见： https://github.com/facebook/react/issues/14099\n\n  useEffect(() => {\n    isRenderredRef.current = true;\n  });\n\n  /**\n   * 注册标签页\n   */\n  const register = useCallback((tabId: string, props: TabProps) => {\n    const sortedTabs = sortedTabsRef.current;\n    const currentIdx = sortedTabs.indexOf(tabId);\n    if (isRenderredRef.current && currentIdx === -1) {\n      setRenderCount((state) => state + 1);\n      return -1;\n    }\n\n    const isAdded = tabsRef.current.indexOf(tabId) !== -1;\n\n    if (!isAdded) {\n      tabsRef.current.push(tabId);\n      tabsPropsRef.current[tabId] = props;\n    }\n\n    if (currentIdx !== -1) {\n      return currentIdx;\n    }\n\n    const idx = sortedTabs.length;\n    sortedTabs.push(tabId);\n\n    return idx;\n  }, []);\n\n  /**\n   * 取消注册标签页\n   */\n  const unregister = useCallback((tabId: string) => {\n    const sortedTabs = sortedTabsRef.current;\n    const tabs = tabsRef.current;\n    const idx = sortedTabs.indexOf(tabId);\n\n    const tabIdx = tabs.indexOf(tabId);\n    if (tabIdx !== -1) {\n      tabs.splice(tabIdx, 1);\n      delete tabsPropsRef.current[tabId];\n    }\n\n    if (idx !== -1) {\n      sortedTabs.splice(idx, 1);\n\n      setRenderCount((state) => state + 1);\n    }\n  }, []);\n\n  /**\n   * 获取所有标签id\n   */\n  const getTabs = useCallback(() => {\n    return sortedTabsRef.current;\n  }, []);\n\n  /**\n   * 获取指定id的属性\n   */\n  const getTabProps = useCallback((tabId: string) => {\n    return tabsPropsRef.current[tabId];\n  }, []);\n\n  return useMemo(\n    () => ({\n      register,\n      unregister,\n      selectedIndex,\n      renderCount,\n      getTabs,\n      getTabProps,\n    }),\n    [getTabProps, getTabs, register, renderCount, selectedIndex, unregister],\n  );\n}\n\nexport default useTabList;\n","import styled, { css } from 'styled-components';\n\ninterface Props {\n  borderless?: boolean;\n}\n\nconst borderCss = css`\n  border-bottom: 1px solid rgba(0, 0, 0, 0.12);\n`;\n\nconst TabHeaderWrapper = styled.div<Props>`\n  display: flex;\n  overflow: hidden;\n  flex-shrink: 0;\n  font-size: 1rem;\n  white-space: nowrap;\n  align-items: stretch;\n  ${(props) => !props.borderless && borderCss}\n`;\n\nexport default TabHeaderWrapper;\n","import styled, { css } from 'styled-components';\nimport classNames from 'classnames';\nimport { getColorFromTheme } from 'sinoui-components/utils/colors';\n\nconst topCss = css`\n  top: 0;\n`;\n\ninterface Props {\n  top?: boolean;\n  color?: string;\n}\n\n/**\n * 选择指示器\n */\nconst InkBar = styled.div.attrs((props) => ({\n  className: classNames('sinoui-ink-bar', props.className),\n}))<Props>`\n  position: absolute;\n  bottom: 0;\n  ${(props) => props.top && topCss};\n  left: 0;\n  transition: ${(props) =>\n    props.theme.transitions.create(['transform', 'width'])};\n  height: 2px;\n  background-color: ${(props) =>\n    getColorFromTheme(props, props.theme.palette.primary[500])};\n`;\n\nexport default InkBar;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { useRipple } from '@sinoui/ripple';\nimport breakpoint from 'styled-components-breakpoint';\n\nconst TabHeaderScrollButtonWrapper = styled.div<any>`\n  width: 40px;\n  overflow: hidden;\n  position: relative;\n  text-align: center;\n  font-size: 1.25rem;\n  align-items: center;\n  justify-content: center;\n  color: ${(props) => props.theme.palette.text.primary};\n  cursor: pointer;\n\n  display: none;\n  ${breakpoint('sm')`\n    display: inline-flex;\n  `}\n\n  ${(props) => props.disabled && `cursor:default;`};\n`;\n\n/**\n * 标签条上的滚动按钮\n */\nfunction TabHeaderScrollButton(\n  props: React.DetailedHTMLProps<\n    React.HTMLAttributes<HTMLDivElement>,\n    HTMLDivElement\n  > & { disabled?: boolean },\n) {\n  const { disabled, children, ...rest } = props;\n  const ref = useRipple<HTMLDivElement>(undefined, disabled);\n  return (\n    <TabHeaderScrollButtonWrapper\n      {...rest}\n      ref={ref}\n      className=\"sinoui-tab-header-scroll-button\"\n      aria-disabled={disabled}\n      disabled={disabled}\n    >\n      {disabled ? null : children}\n    </TabHeaderScrollButtonWrapper>\n  );\n}\n\nexport default TabHeaderScrollButton;\n","import React from 'react';\n\nfunction NextIcon() {\n  return (\n    <svg\n      focusable=\"false\"\n      viewBox=\"0 0 24 24\"\n      aria-hidden=\"true\"\n      role=\"presentation\"\n      fill=\"currentColor\"\n      width=\"1em\"\n      height=\"1em\"\n    >\n      <path d=\"M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z\" />\n    </svg>\n  );\n}\n\nexport default NextIcon;\n","import React from 'react';\n\nfunction PrevIcon() {\n  return (\n    <svg\n      focusable=\"false\"\n      viewBox=\"0 0 24 24\"\n      aria-hidden=\"true\"\n      role=\"presentation\"\n      fill=\"currentColor\"\n      width=\"1em\"\n      height=\"1em\"\n    >\n      <path d=\"M15.41 16.09l-4.58-4.59 4.58-4.59L14 5.5l-6 6 6 6z\" />\n    </svg>\n  );\n}\n\nexport default PrevIcon;\n","import { useEffect } from 'react';\n\n/**\n * 在组件初次渲染时阻止 transition 动画\n */\nfunction usePreventTransitionWhenMount<T extends HTMLElement>(\n  elementRef: React.RefObject<T>,\n) {\n  useEffect(() => {\n    const element = elementRef.current;\n    if (element) {\n      const { transition } = element.style;\n      element.style.transition = 'none';\n      const rafId = requestAnimationFrame(() => {\n        element.style.transition = transition;\n      });\n\n      return () => cancelAnimationFrame(rafId);\n    }\n    return undefined;\n  }, [elementRef]);\n}\n\nexport default usePreventTransitionWhenMount;\n","import { useEffect } from 'react';\nimport usePreventTransitionWhenMount from '../../helpers/usePreventTransitionWhenMount';\n\n/**\n * 同步指示条位置的hook\n *\n * @param inkBarRef 指示条元素引用\n * @param tabListRef 标签列表元素引用\n * @param selectedIndex 当前选中的索引\n */\nfunction useInkbarPositionSync(\n  inkBarRef: React.RefObject<HTMLDivElement>,\n  tabListRef: React.RefObject<HTMLDivElement>,\n  selectedIndex: number,\n) {\n  usePreventTransitionWhenMount(inkBarRef);\n\n  useEffect(() => {\n    const inkBar = inkBarRef.current;\n    const tabList = tabListRef.current;\n    if (inkBar && tabList) {\n      const activeTab = tabList.querySelector('.sinoui-tab--active');\n      if (activeTab) {\n        const { width, left } = activeTab.getBoundingClientRect();\n        const { left: containerLeft } = tabList.getBoundingClientRect();\n        const { scrollLeft } = tabList;\n        inkBar.style.width = `${width}px`;\n        inkBar.style.transform = `translate3d(${left -\n          containerLeft +\n          scrollLeft}px, 0px, 0px)`;\n      }\n    }\n  }, [inkBarRef, tabListRef, selectedIndex]);\n}\n\nexport default useInkbarPositionSync;\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { useRef, useLayoutEffect, useCallback, useEffect } from 'react';\n\n// 兼容服务器渲染\nconst useEnhancedEffect =\n  typeof window !== 'undefined' ? useLayoutEffect : useEffect;\n\n/**\n * useCallback() 的替代品\n *\n * https://github.com/facebook/react/issues/14099#issuecomment-440013892\n *\n * @param fn 回调函数\n */\nfunction useEventCallback<T extends Function>(fn: T): T {\n  const ref = useRef<T>(fn);\n\n  useEnhancedEffect(() => {\n    ref.current = fn;\n  });\n\n  return useCallback(() => ref.current(), []) as any;\n}\n\nexport default useEventCallback;\n","/* eslint-disable no-return-assign */\n/* eslint-disable no-param-reassign */\n/* eslint-disable no-cond-assign */\n\n/**\n * 加速进入减速退出的 js 缓动函数实现\n *\n * 摘自 [js-easing-functions](https://github.com/bameyrick/js-easing-functions)\n *\n * @param elapsed 当前时间\n * @param initialValue 初始值\n * @param amountOfChange 值变化的量\n * @param duration 时长\n */\nfunction easeInOut(\n  elapsed: number,\n  initialValue: number,\n  amountOfChange: number,\n  duration: number,\n): number {\n  if ((elapsed /= duration / 2) < 1) {\n    return (amountOfChange / 2) * elapsed * elapsed * elapsed + initialValue;\n  }\n  return (\n    (amountOfChange / 2) * ((elapsed -= 2) * elapsed * elapsed + 2) +\n    initialValue\n  );\n}\n\nexport default easeInOut;\n","import { animate } from '@sinoui/utils';\nimport easeInOut from './easeInOut';\n\nconst easeInOutAnimate = (\n  start: number,\n  end: number,\n  duration: number,\n  update: (value: number) => void,\n) => animate(start, end, duration, update, easeInOut);\n\nexport default easeInOutAnimate;\n","import { useEffect, useCallback, useState, useMemo } from 'react';\nimport { debounce } from '@sinoui/utils';\nimport { DEBOUNCE_WAIT } from '../../constants';\nimport { TabListContextState } from '../TabListContext';\nimport useEventCallback from '../../helpers/useEventCallback';\nimport animate from '../../helpers/animate';\n\n/**\n * 使用滚动状态的hook\n * @param tabListRef 标签列表元素引用\n */\nfunction useScrollState(\n  tabListRef: React.RefObject<HTMLDivElement>,\n  tabListContextState: TabListContextState,\n) {\n  const [showScrollButtons, setShowScrollButtons] = useState(false); // 是否显示滚动按钮\n  const [isPrevDisabled, setIsPrevDisabled] = useState(true); // 向前滚动按钮是否禁用\n  const [isNextDisabled, setIsNextDisabled] = useState(false); // 向后滚动按钮是否禁用\n\n  /**\n   * 滚动指定距离\n   */\n  const scrollBy = useCallback(\n    (delta: number) => {\n      const tabList = tabListRef.current;\n\n      if (tabList) {\n        const { scrollLeft } = tabList;\n        const newScrollLeft = scrollLeft + delta;\n        animate(scrollLeft, newScrollLeft, 300, (value) => {\n          tabList.scrollLeft = value;\n        });\n      }\n    },\n    [tabListRef],\n  );\n\n  /**\n   * 更新滚动按钮的状态\n   */\n  const updateScrollButtonsState = useCallback(() => {\n    const tabList = tabListRef.current;\n\n    if (tabList) {\n      const { scrollWidth, clientWidth, scrollLeft } = tabList;\n      setShowScrollButtons(scrollWidth > clientWidth);\n      setIsPrevDisabled(scrollLeft < 1);\n      setIsNextDisabled(scrollWidth - clientWidth === scrollLeft);\n    }\n  }, [tabListRef]);\n\n  /**\n   * 滚动标签条以使选中的标签出现在视口中\n   */\n  const scrollSelectedTabIntoView = useEventCallback(() => {\n    const selectedTabId = tabListContextState.getTabs()[\n      tabListContextState.selectedIndex\n    ];\n    const selectedTab = document.querySelector(`#${selectedTabId}`);\n    const tabList = tabListRef.current;\n\n    if (selectedTab && tabList) {\n      const tabListRect = tabList.getBoundingClientRect();\n      const tabRect = selectedTab.getBoundingClientRect();\n\n      if (tabRect.left < tabListRect.left) {\n        scrollBy(tabRect.left - tabListRect.left);\n      } else if (tabRect.right > tabListRect.right) {\n        scrollBy(tabRect.right - tabListRect.right);\n      }\n    }\n  });\n\n  useEffect(() => {\n    updateScrollButtonsState();\n  }, [updateScrollButtonsState]);\n\n  useEffect(() => {\n    scrollSelectedTabIntoView();\n  }, [\n    scrollSelectedTabIntoView,\n    showScrollButtons,\n    tabListContextState.selectedIndex,\n  ]);\n\n  useEffect(() => {\n    const handleResize = debounce(() => {\n      updateScrollButtonsState();\n      scrollSelectedTabIntoView();\n    }, DEBOUNCE_WAIT);\n\n    window.addEventListener('resize', handleResize, false);\n\n    return () => {\n      handleResize.cancel();\n      window.removeEventListener('resize', handleResize, false);\n    };\n  }, [scrollSelectedTabIntoView, updateScrollButtonsState]);\n\n  /**\n   * 向前（左）滚动\n   */\n  const prev = useCallback(() => {\n    const tabList = tabListRef.current;\n\n    if (tabList) {\n      const { clientWidth } = tabList;\n      scrollBy(-clientWidth);\n    }\n  }, [scrollBy, tabListRef]);\n\n  /**\n   * 向后（右）滚动\n   */\n  const next = useCallback(() => {\n    const tabList = tabListRef.current;\n\n    if (tabList) {\n      const { clientWidth } = tabList;\n      scrollBy(clientWidth);\n    }\n  }, [scrollBy, tabListRef]);\n\n  // 处理标签列表的滚动事件\n  const handleTabListScroll = useMemo(\n    () => debounce(updateScrollButtonsState, DEBOUNCE_WAIT),\n    [updateScrollButtonsState],\n  );\n\n  useEffect(() => {\n    return () => handleTabListScroll.cancel();\n  }, [handleTabListScroll]);\n\n  return {\n    showScrollButtons,\n    isPrevDisabled,\n    isNextDisabled,\n    prev,\n    next,\n    onTabListScroll: handleTabListScroll,\n  };\n}\n\nexport default useScrollState;\n","import styled from 'styled-components';\n\nconst TabHeaderExtraContent = styled.div`\n  line-height: 48px;\n`;\n\nexport default TabHeaderExtraContent;\n","import styled, { css } from 'styled-components';\n\ninterface Props {\n  /**\n   * 全宽模式\n   */\n  fullWidth?: boolean;\n}\n\nconst fullWidthCss = css`\n  && {\n    overflow: hidden;\n\n    & > .sinoui-tab {\n      flex: 1;\n      padding: 10px 8px;\n      overflow: hidden;\n      display: inline-block;\n      text-overflow: ellipsis;\n      white-space: nowrap;\n    }\n  }\n`;\n\nconst TabList = styled.div<Props>`\n  flex: 1;\n  position: relative;\n  transition: transform 0.5s cubic-bezier(0.35, 0, 0.25, 1);\n  display: flex;\n\n  /* 隐藏滚动条 */\n  &::-webkit-scrollbar {\n    display: none; /* chrome, safari, opera */\n  }\n  scrollbar-width: none; /* firefox */\n  -ms-overflow-style: none; /* IE 10+, edge */\n  overflow: -moz-scrollbars-none; /* old firefox */\n\n  overflow-x: scroll;\n\n  ${(props) => props.fullWidth && fullWidthCss};\n`;\n\nexport default TabList;\n","import React, { useRef } from 'react';\nimport TabHeaderWrapper from './TabHeaderWrapper';\nimport InkBar from '../InkBar';\nimport TabHeaderScrollButton from './TabHeaderScrollButton';\nimport NextIcon from './NextIcon';\nimport PrevIcon from './PrevIcon';\nimport useInkbarPositionSync from './useInkbarPositionSync';\nimport useScrollState from './useScrollState';\nimport TabHeaderExtraContent from './TabHeaderExtraContent';\nimport TabList from './TabList';\nimport { TabListContextState } from '../TabListContext';\n\ninterface Props {\n  children: React.ReactNode;\n  /**\n   * 在标签右侧添加附加内容。\n   */\n  extraContent?: React.ReactNode;\n  /**\n   * 设置不显示底部线条。默认为 `false`。\n   */\n  borderless?: boolean;\n  /**\n   * 标签列表上下文状态\n   */\n  tabListContextState: TabListContextState;\n  /**\n   * 指示条颜色\n   */\n  inkBarColor?: string;\n\n  /**\n   * 全宽模式\n   */\n  fullWidth?: boolean;\n}\n\nfunction InnerTabHeader({\n  children,\n  extraContent,\n  borderless,\n  tabListContextState,\n  inkBarColor,\n  fullWidth,\n  ...rest\n}: Props) {\n  const tabListRef = useRef<HTMLDivElement>(null);\n  const inkBarRef = useRef<HTMLDivElement>(null);\n\n  useInkbarPositionSync(\n    inkBarRef,\n    tabListRef,\n    tabListContextState.selectedIndex,\n  );\n  const {\n    showScrollButtons,\n    isPrevDisabled,\n    isNextDisabled,\n    prev,\n    next,\n    onTabListScroll,\n  } = useScrollState(tabListRef, tabListContextState);\n\n  return (\n    <TabHeaderWrapper\n      className=\"sinoui-tab-header\"\n      role=\"tablist\"\n      borderless={borderless}\n      {...rest}\n    >\n      {showScrollButtons && (\n        <TabHeaderScrollButton disabled={isPrevDisabled} onClick={prev}>\n          <PrevIcon />\n        </TabHeaderScrollButton>\n      )}\n      <TabList\n        className=\"sinoui-tab-list\"\n        ref={tabListRef}\n        onScroll={onTabListScroll}\n        fullWidth={fullWidth}\n      >\n        {children}\n        <InkBar ref={inkBarRef} data-testid=\"inkbar\" color={inkBarColor} />\n      </TabList>\n      {showScrollButtons && (\n        <TabHeaderScrollButton disabled={isNextDisabled} onClick={next}>\n          <NextIcon />\n        </TabHeaderScrollButton>\n      )}\n      {extraContent ? (\n        <TabHeaderExtraContent className=\"sinoui-tab-header__extra-content\">\n          {extraContent}\n        </TabHeaderExtraContent>\n      ) : null}\n    </TabHeaderWrapper>\n  );\n}\n\nexport default InnerTabHeader;\n","import React, { useMemo } from 'react';\nimport TabHeaderContext from '../TabHeaderContext';\nimport useRefValue from '../../helpers/useRefValue';\nimport InnerTabHeader from './InnerTabHeader';\nimport TabListContext from '../TabListContext';\nimport useTabList from '../commons/useTabList';\n\ninterface Props {\n  children?: React.ReactNode;\n  /**\n   * 指定在密集模式下使用。\n   */\n  dense?: boolean;\n  /**\n   * 设置当前选中的标签页。这是一个从 `0` 开始的索引，第一个标签页的索引为 `0`，第二个标签页的索引为 `1`，……\n   */\n  selectedIndex: number;\n  /**\n   * 每次标签页切换时调用的事件处理器。这个函数的 `index` 参数是新的选中标签页索引，`lastIndex` 参数是变更之前选中的标签页索引，`event` 参数是引起页签切换的事件，可能是 `keydown` 或者 `click` 事件。如果 `index` 和 `lastIndex` 相同时，表示用户在当前选中的标签页上点击。\n   */\n  onSelect?: (\n    index: number,\n    lastIndex: number,\n    event: React.MouseEvent | React.KeyboardEvent,\n  ) => boolean | undefined | void;\n  /**\n   * 在标签右侧添加附加内容。\n   */\n  extraContent?: React.ReactNode;\n  /**\n   * 设置不显示底部线条。默认为 `false`。\n   */\n  borderless?: boolean;\n\n  /**\n   * 设置自定义的 css 类名\n   */\n  className?: string;\n\n  /**\n   * 设置自定义的 css 样式\n   */\n  style?: React.CSSProperties;\n  /**\n   * 标签文本颜色\n   */\n  textColor?: string;\n  /**\n   * 指示条颜色\n   */\n  inkBarColor?: string;\n\n  /**\n   * 全宽模式\n   */\n  fullWidth?: boolean;\n}\n\n/**\n * 选项卡头部组件\n *\n */\nfunction TabHeader({\n  children,\n  dense,\n  selectedIndex = 0,\n  onSelect,\n  extraContent,\n  borderless,\n  textColor,\n  inkBarColor,\n  ...rest\n}: Props) {\n  const tabList = useTabList(selectedIndex);\n\n  const onSelectRef = useRefValue(onSelect);\n\n  const context = useMemo(\n    () => ({\n      dense,\n      onSelect: (\n        tabIndex: number,\n        event: React.MouseEvent | React.KeyboardEvent,\n      ) => {\n        if (onSelectRef.current) {\n          onSelectRef.current(tabIndex, selectedIndex, event);\n        }\n      },\n      textColor,\n    }),\n    [dense, onSelectRef, selectedIndex, textColor],\n  );\n\n  return (\n    <TabListContext.Provider value={tabList}>\n      <TabHeaderContext.Provider value={context}>\n        <InnerTabHeader\n          extraContent={extraContent}\n          borderless={borderless}\n          tabListContextState={tabList}\n          inkBarColor={inkBarColor}\n          {...rest}\n        >\n          {children}\n        </InnerTabHeader>\n      </TabHeaderContext.Provider>\n    </TabListContext.Provider>\n  );\n}\n\nexport default TabHeader;\n","export const LEFT_KEY_CODE = 37; // 方向键左\n\nexport const TOP_KEY_CODE = 38; // 方向键上\n\nexport const RIGHT_KEY_CODE = 39; // 方向键右\n\nexport const BOTTOM_KEY_CODE = 40; // 方向键下\n\n/**\n * 防抖函数的延时时长\n */\nexport const DEBOUNCE_WAIT = 166; // 10 帧，166 毫秒\n","import { useRef } from 'react';\n\n/**\n * 使用同步的“变量”\n */\nfunction useRefValue<T>(value: T) {\n  const ref = useRef(value);\n\n  ref.current = value;\n\n  return ref;\n}\n\nexport default useRefValue;\n"],"sourceRoot":""}