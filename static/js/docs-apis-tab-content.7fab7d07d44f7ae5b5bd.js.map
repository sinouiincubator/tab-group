{"version":3,"sources":["D:/Users/jacki/Documents/GitHub/tab-group/docs/apis/TabContent.mdx","D:/Users/jacki/Documents/GitHub/tab-group/src/components/TabContentContext.ts","D:/Users/jacki/Documents/GitHub/tab-group/src/components/TabListContext.ts","D:/Users/jacki/Documents/GitHub/tab-group/src/components/commons/useTabList.ts","D:/Users/jacki/Documents/GitHub/tab-group/src/components/tab-content/TabContentWrapper.tsx","D:/Users/jacki/Documents/GitHub/tab-group/src/components/tab-content/TabPanelListWrapper.tsx","D:/Users/jacki/Documents/GitHub/tab-group/src/components/tab-content/TabContent.tsx","D:/Users/jacki/Documents/GitHub/tab-group/src/helpers/useRefValue.ts"],"names":["layoutProps","MDXLayout","MDXContent","components","props","mdxType","of","TabContent","isMDXComponent","TabContentContext","React","createContext","TabListContext","useTabList","selectedIndex","useState","renderCount","setRenderCount","isRenderredRef","useRef","tabsRef","sortedTabsRef","tabsPropsRef","current","useEffect","register","useCallback","tabId","sortedTabs","currentIdx","indexOf","state","push","idx","length","unregister","tabs","tabIdx","splice","getTabs","getTabProps","useMemo","TabContentWrapper","styled","div","transitionCss","css","TabPanelListWrapper","animateTransitions","className","children","forceRenderTabPanel","cacheable","animateHeight","onSelect","rest","tabListContext","onSelectRef","useRefValue","context","inTabContent","tabIndex","event","left","tabContentRef","prevSelectedIndexRef","prevSelectedIndex","tabContent","prev","querySelector","style","height","prevHeight","getBoundingClientRect","overflow","isEnd","reset","transition","rafId","requestAnimationFrame","timeoutId","setTimeout","cancelAnimationFrame","clearTimeout","useAnimateHeight","Provider","value","classNames","ref"],"mappings":"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","file":"static/js/docs-apis-tab-content.6871eeb5.js","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport { Playground, Props } from 'docz';\nimport TabContent from '../../src/components/tab-content/TabContent';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"tabcontent\"\n    }}>{`TabContent`}</h1>\n    <Props of={TabContent} mdxType=\"Props\" />\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","import React from 'react';\n\ninterface TabContentContextState {\n  inTabContent: boolean;\n  /**\n   * 是否立即渲染所有的标签面板到 DOM 中。\n   */\n  forceRenderTabPanel?: boolean;\n  /**\n   * 设置启动标签面板渲染到 DOM 的缓存特性。\n   */\n  cacheable?: boolean;\n  /**\n   * 变更当前选项卡\n   */\n  onSelect: (\n    tabIndex: number,\n    event: React.MouseEvent | React.KeyboardEvent,\n  ) => void;\n}\n\n/**\n * 标签页内容上下文\n */\nconst TabContentContext = React.createContext<TabContentContextState | null>(\n  null,\n);\n\nexport default TabContentContext;\n","import React from 'react';\n\nexport interface TabProps {\n  disabled?: boolean;\n}\n\nexport interface TabListContextState {\n  /**\n   * 注册标签页\n   */\n  register: (tabId: string, props: TabProps) => number;\n  /**\n   * 取消注册标签页\n   */\n  unregister: (tabId: string) => void;\n  /**\n   * 当前选中标签页的索引。索引从 0 开始。\n   */\n  selectedIndex: number;\n  /**\n   * 获取所有标签页的id\n   */\n  getTabs(): string[];\n  getTabProps(tabId: string): TabProps;\n}\n\n/**\n * 标签列表上下文\n */\nconst TabListContext = React.createContext<TabListContextState | null>(null);\n\nexport default TabListContext;\n","import { useEffect, useState, useRef, useCallback, useMemo } from 'react';\nimport { TabProps } from '../TabListContext';\n\n/**\n * 标签页列表状态管理\n */\nfunction useTabList(selectedIndex: number) {\n  const [renderCount, setRenderCount] = useState(1); // 内部 tab 发生变化引起重绘的次数\n  const isRenderredRef = useRef(false); // 是否已经同步渲染过\n  const tabsRef = useRef<string[]>([]); // 所有包含标签页（无序的）\n  const sortedTabsRef = useRef<string[]>([]); // 包含的有序的标签页\n  const tabsPropsRef = useRef<{ [name: string]: TabProps }>({});\n  sortedTabsRef.current = []; // TODO: current mode 可能会有缺陷，参见： https://github.com/facebook/react/issues/14099\n  isRenderredRef.current = false; // TODO: current mode 可能会有缺陷，参见： https://github.com/facebook/react/issues/14099\n\n  useEffect(() => {\n    isRenderredRef.current = true;\n  });\n\n  /**\n   * 注册标签页\n   */\n  const register = useCallback((tabId: string, props: TabProps) => {\n    const sortedTabs = sortedTabsRef.current;\n    const currentIdx = sortedTabs.indexOf(tabId);\n    if (isRenderredRef.current && currentIdx === -1) {\n      setRenderCount((state) => state + 1);\n      return -1;\n    }\n\n    const isAdded = tabsRef.current.indexOf(tabId) !== -1;\n\n    if (!isAdded) {\n      tabsRef.current.push(tabId);\n      tabsPropsRef.current[tabId] = props;\n    }\n\n    if (currentIdx !== -1) {\n      return currentIdx;\n    }\n\n    const idx = sortedTabs.length;\n    sortedTabs.push(tabId);\n\n    return idx;\n  }, []);\n\n  /**\n   * 取消注册标签页\n   */\n  const unregister = useCallback((tabId: string) => {\n    const sortedTabs = sortedTabsRef.current;\n    const tabs = tabsRef.current;\n    const idx = sortedTabs.indexOf(tabId);\n\n    const tabIdx = tabs.indexOf(tabId);\n    if (tabIdx !== -1) {\n      tabs.splice(tabIdx, 1);\n      delete tabsPropsRef.current[tabId];\n    }\n\n    if (idx !== -1) {\n      sortedTabs.splice(idx, 1);\n\n      setRenderCount((state) => state + 1);\n    }\n  }, []);\n\n  /**\n   * 获取所有标签id\n   */\n  const getTabs = useCallback(() => {\n    return sortedTabsRef.current;\n  }, []);\n\n  /**\n   * 获取指定id的属性\n   */\n  const getTabProps = useCallback((tabId: string) => {\n    return tabsPropsRef.current[tabId];\n  }, []);\n\n  return useMemo(\n    () => ({\n      register,\n      unregister,\n      selectedIndex,\n      renderCount,\n      getTabs,\n      getTabProps,\n    }),\n    [getTabProps, getTabs, register, renderCount, selectedIndex, unregister],\n  );\n}\n\nexport default useTabList;\n","import styled from 'styled-components';\n\nconst TabContentWrapper = styled.div`\n  overflow-x: hidden;\n\n  transition: height 0.5s cubic-bezier(0.15, 0.3, 0.25, 1) 0s;\n`;\n\nexport default TabContentWrapper;\n","import styled, { css } from 'styled-components';\n\nconst transitionCss = css`\n  transition: left 0.35s cubic-bezier(0.15, 0.3, 0.25, 1) 0s;\n`;\n\nconst TabPanelListWrapper = styled.div<{ animateTransitions: boolean }>`\n  display: flex;\n  align-items: flex-start;\n  position: relative;\n  ${(props) => props.animateTransitions && transitionCss}\n`;\n\nexport default TabPanelListWrapper;\n","import React, { useMemo, useRef, useEffect } from 'react';\nimport classNames from 'classnames';\nimport TabContentContext from '../TabContentContext';\nimport TabContentWrapper from './TabContentWrapper';\nimport TabPanelListWrapper from './TabPanelListWrapper';\nimport useTabList from '../commons/useTabList';\nimport TabListContext, { TabListContextState } from '../TabListContext';\nimport useRefValue from '../../helpers/useRefValue';\n\nexport interface Props {\n  children?: React.ReactNode;\n  /**\n   * 指定自定义样式名\n   */\n  className?: string;\n  /**\n   * 指定自定义样式\n   */\n  style?: React.CSSProperties;\n  /**\n   * 设置当前选中的标签页。这是一个从 `0` 开始的索引，第一个标签页的索引为 `0`，第二个标签页的索引为 `1`，……\n   */\n  selectedIndex: number;\n  /**\n   * 默认情况下只有当前标签面板会渲染到 DOM 中（出于性能考量）。如果设置为 `true`，则所有的标签面板从一开始就会立即渲染到 DOM 中。默认为 `false`。\n   */\n  forceRenderTabPanel?: boolean;\n  /**\n   * 设置启动标签面板渲染到 DOM 的缓存特性。当`forceRenderTabPanel` 为 `false` 此配置才有效。默认为 `true`。如果设置为 `false`，则不会缓存标签面板的渲染，标签切换后，销毁该标签面板的DOM。\n   */\n  cacheable?: boolean;\n  /**\n   * 设置启用标签面板切换时内容高度过渡动画。默认为 `false`，不启用。设置为 `true`，启用高度过渡动画，但是可能会影响性能。\n   */\n  animateHeight?: boolean;\n  /**\n   * 默认为 `true`。设置为 `false`，禁止内容切换时的过度动画。\n   */\n  animateTransitions?: boolean;\n  /**\n   * 每次标签页切换时调用的事件处理器。这个函数的 `index` 参数是新的选中标签页索引，`lastIndex` 参数是变更之前选中的标签页索引，`event` 参数是引起页签切换的事件，可能是 `keydown` 或者 `click` 事件。如果 `index` 和 `lastIndex` 相同时，表示用户在当前选中的标签页上点击。\n   */\n  onSelect?: (\n    index: number,\n    lastIndex: number,\n    event: React.MouseEvent | React.KeyboardEvent,\n  ) => boolean | undefined | void;\n}\n\n/**\n * 应用高度动画的hook。\n *\n * @param animateHeight 是否启用高度动画\n * @param selectedIndex 当前标签的索引位置\n * @param tabContentRef 标签内容容器DOM\n * @param tabListContext 标签列表上下文\n */\nfunction useAnimateHeight(\n  animateHeight: boolean,\n  selectedIndex: number,\n  tabContentRef: React.RefObject<HTMLDivElement>,\n  tabListContext: TabListContextState,\n) {\n  const prevSelectedIndexRef = useRef(selectedIndex);\n\n  useEffect(() => {\n    const prevSelectedIndex = prevSelectedIndexRef.current;\n    const tabContent = tabContentRef.current;\n    prevSelectedIndexRef.current = selectedIndex;\n\n    if (prevSelectedIndex === selectedIndex || !tabContent || !animateHeight) {\n      return undefined;\n    }\n\n    const tabs = tabListContext.getTabs();\n    const prev = tabContent.querySelector(\n      `#${tabs[prevSelectedIndex]}`,\n    ) as HTMLElement;\n    const current = tabContent.querySelector(\n      `#${tabs[selectedIndex]}`,\n    ) as HTMLElement;\n    prev.style.height = 'auto';\n    current.style.height = '';\n    const { height: prevHeight } = prev.getBoundingClientRect();\n    const { height } = current.getBoundingClientRect();\n\n    tabContent.style.height = `${prevHeight}px`;\n    tabContent.style.overflow = 'hidden';\n\n    let isEnd = false;\n    const reset = () => {\n      isEnd = true;\n      tabContent.style.transition = '';\n      tabContent.style.height = '';\n      tabContent.style.overflow = '';\n      prev.style.height = '';\n    };\n\n    const rafId = requestAnimationFrame(() => {\n      tabContent.style.height = `${height}px`;\n    });\n\n    const timeoutId = setTimeout(reset, 500);\n\n    return () => {\n      cancelAnimationFrame(rafId);\n      clearTimeout(timeoutId);\n      if (!isEnd) {\n        reset();\n      }\n    };\n  }, [animateHeight, selectedIndex, tabContentRef, tabListContext]);\n}\n\n/**\n * 选项卡组件的内容组件\n */\nexport default function TabContent(props: Props) {\n  const {\n    className,\n    selectedIndex,\n    children,\n    forceRenderTabPanel,\n    cacheable,\n    animateHeight = false,\n    animateTransitions = true,\n    onSelect,\n    ...rest\n  } = props;\n  const tabListContext = useTabList(selectedIndex);\n  const onSelectRef = useRefValue(onSelect);\n  const context = useMemo(\n    () => ({\n      inTabContent: true,\n      forceRenderTabPanel,\n      cacheable,\n      onSelect: (\n        tabIndex: number,\n        event: React.MouseEvent | React.KeyboardEvent,\n      ) => {\n        if (onSelectRef.current) {\n          onSelectRef.current(tabIndex, selectedIndex, event);\n        }\n      },\n    }),\n    [cacheable, forceRenderTabPanel, onSelectRef, selectedIndex],\n  );\n  const left = `-${100 * selectedIndex}%`;\n\n  const tabContentRef = useRef<HTMLDivElement>(null);\n  useAnimateHeight(animateHeight, selectedIndex, tabContentRef, tabListContext);\n\n  return (\n    <TabListContext.Provider value={tabListContext}>\n      <TabContentContext.Provider value={context}>\n        <TabContentWrapper\n          className={classNames('sinoui-tab-content', className)}\n          {...rest}\n          ref={tabContentRef}\n        >\n          <TabPanelListWrapper\n            style={{ left }}\n            className=\"sinoui-tab-panel-list\"\n            animateTransitions={animateTransitions}\n          >\n            {children}\n          </TabPanelListWrapper>\n        </TabContentWrapper>\n      </TabContentContext.Provider>\n    </TabListContext.Provider>\n  );\n}\n","import { useRef } from 'react';\n\n/**\n * 使用同步的“变量”\n */\nfunction useRefValue<T>(value: T) {\n  const ref = useRef(value);\n\n  ref.current = value;\n\n  return ref;\n}\n\nexport default useRefValue;\n"],"sourceRoot":""}