{"version":3,"sources":["E:/workspaces/tab-group/docs/apis/TabGroup.mdx","E:/workspaces/tab-group/src/components/TabContentContext.ts","E:/workspaces/tab-group/src/components/TabGroup.tsx","E:/workspaces/tab-group/src/components/TabHeaderContext.ts","E:/workspaces/tab-group/src/components/TabListContext.ts","E:/workspaces/tab-group/src/components/commons/useTabList.ts","E:/workspaces/tab-group/src/components/tab-content/TabContentWrapper.tsx","E:/workspaces/tab-group/src/components/tab-content/TabPanelListWrapper.tsx","E:/workspaces/tab-group/src/components/tab-content/TabContent.tsx","E:/workspaces/tab-group/src/components/tab-content/index.ts","E:/workspaces/tab-group/src/helpers/usePreventTransitionWhenMount.ts","E:/workspaces/tab-group/src/components/tab-header/TabHeaderWrapper.tsx","E:/workspaces/tab-group/src/components/InkBar.tsx","E:/workspaces/tab-group/src/components/tab-header/InnerTabHeader.tsx","E:/workspaces/tab-group/src/components/tab-header/TabHeader.tsx","E:/workspaces/tab-group/src/components/tab-header/index.ts","E:/workspaces/tab-group/src/helpers/useRefValue.ts"],"names":["layoutProps","MDXLayout","MDXContent","components","props","mdxType","of","TabGroup","isMDXComponent","TabContentContext","React","createContext","InnerTabGroup","className","onSelect","selectedIndex","children","dense","forceRenderTabPanel","cacheable","animateHeight","tabHeaderExtraContent","borderless","rest","classNames","extraContent","UnControlledTabGroup","defaultIndex","useState","setSelectedIndex","onSelectRef","useRefValue","handleTabSelect","useCallback","tabIndex","prevSelectedIndex","event","onSelectProps","current","useRef","undefined","TabHeaderContext","TabListContext","useTabList","renderCount","setRenderCount","isRenderredRef","tabsRef","sortedTabsRef","tabsPropsRef","useEffect","register","tabId","sortedTabs","currentIdx","indexOf","state","push","idx","length","unregister","tabs","tabIdx","splice","getTabs","getTabProps","useMemo","TabContentWrapper","styled","div","TabPanelListWrapper","TabContent","tabListContext","context","inTabContent","transform","tabContentRef","prevSelectedIndexRef","tabContent","prev","querySelector","style","height","prevHeight","getBoundingClientRect","overflow","isEnd","reset","transition","rafId","requestAnimationFrame","timeoutId","setTimeout","cancelAnimationFrame","clearTimeout","useAnimateHeight","Provider","value","ref","usePreventTransitionWhenMount","elementRef","element","borderCss","css","TabHeaderWrapper","theme","palette","text","primary","topCss","InkBar","attrs","top","transitions","create","InnerTabHeader","tabListRef","inkBarRef","inkBar","tabList","activeTab","width","left","containerLeft","role","data-testid","TabHeader"],"mappings":"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","file":"static/js/docs-apis-tab-group.7e4ea9a5.js","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport { Playground, Props } from 'docz';\nimport TabGroup from '../../src/components/TabGroup';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"tabgroup\"\n    }}>{`TabGroup`}</h1>\n    <Props of={TabGroup} mdxType=\"Props\" />\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","import React from 'react';\n\ninterface TabContentContextState {\n  inTabContent: boolean;\n  /**\n   * 是否立即渲染所有的标签面板到 DOM 中。\n   */\n  forceRenderTabPanel?: boolean;\n  /**\n   * 设置启动标签面板渲染到 DOM 的缓存特性。\n   */\n  cacheable?: boolean;\n}\n\n/**\n * 标签页内容上下文\n */\nconst TabContentContext = React.createContext<TabContentContextState | null>(\n  null,\n);\n\nexport default TabContentContext;\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport React, { useRef, useState, useCallback } from 'react';\nimport classNames from 'classnames';\nimport useRefValue from '../helpers/useRefValue';\nimport { TabSelectCallback } from '../types';\nimport TabHeader from './tab-header';\nimport TabContent from './tab-content';\n\ninterface Props {\n  /**\n   * 允许改变在初始渲染时显示第几个标签页的属性。默认为 `0`。这是一个从 `0` 开始的索引，第一个标签页的索引为 `0`，第二个标签页的索引为 `1`，……\n   */\n  defaultIndex?: number;\n  /**\n   * 设置当前选中的标签页。这是一个从 `0` 开始的索引，第一个标签页的索引为 `0`，第二个标签页的索引为 `1`，……\n   *\n   * 默认值为 null。\n   */\n  selectedIndex?: number;\n  /**\n   * 每次标签页切换时调用的事件处理器。这个函数的 `index` 参数是新的选中标签页索引，`lastIndex` 参数是变更之前选中的标签页索引，`event` 参数是引起页签切换的事件，可能是 `keydown` 或者 `click` 事件。如果 `index` 和 `lastIndex` 相同时，表示用户在当前选中的标签页上点击。\n   */\n  onSelect?: (\n    index: number,\n    lastIndex: number,\n    event: React.MouseEvent | React.KeyboardEvent,\n  ) => boolean | undefined | void;\n  /**\n   * 设置标签。可以是多个 `<Tab />` 元素。\n   */\n  children?: React.ReactNode;\n  /**\n   * 给标签页组件根元素指定新的样式名\n   */\n  className?: string;\n  /**\n   * 设置标签页组件根元素的样式\n   */\n  style?: React.CSSProperties;\n  /**\n   * 设置标签页在密集模式下展现。\n   */\n  dense?: boolean;\n  /**\n   * 默认情况下只有当前标签面板会渲染到 DOM 中（出于性能考量）。如果设置为 `true`，则所有的标签面板从一开始就会立即渲染到 DOM 中。默认为 `false`。\n   */\n  forceRenderTabPanel?: boolean;\n\n  /**\n   * 设置启动标签面板渲染到 DOM 的缓存特性。当`forceRenderTabPanel` 为 `false` 此配置才有效。默认为 `true`。如果设置为 `false`，则不会缓存标签面板的渲染，标签切换后，销毁该标签面板的DOM。\n   */\n  cacheable?: boolean;\n\n  /**\n   * 设置启用标签面板切换时内容高度过渡动画。默认为 `false`，不启用。设置为 `true`，启用高度过渡动画，但是可能会影响性能。\n   */\n  animateHeight?: boolean;\n  /**\n   * 在标签右侧添加附件内容。\n   */\n  tabHeaderExtraContent?: React.ReactNode;\n\n  /**\n   * 设置不显示标签条底部线条。\n   */\n  borderless?: boolean;\n}\n\nfunction InnerTabGroup({\n  className,\n  onSelect,\n  selectedIndex = 0,\n  children,\n  dense,\n  forceRenderTabPanel,\n  cacheable,\n  animateHeight,\n  tabHeaderExtraContent,\n  borderless,\n  ...rest\n}: Props) {\n  return (\n    <div className={classNames('sinoui-tab-group', className)} {...rest}>\n      <TabHeader\n        selectedIndex={selectedIndex}\n        dense={dense}\n        onSelect={onSelect}\n        extraContent={tabHeaderExtraContent}\n        borderless={borderless}\n      >\n        {children}\n      </TabHeader>\n      <TabContent\n        selectedIndex={selectedIndex}\n        forceRenderTabPanel={forceRenderTabPanel}\n        cacheable={cacheable}\n        animateHeight={animateHeight}\n      >\n        {children}\n      </TabContent>\n    </div>\n  );\n}\n\n/**\n * 受控模式的标签页组件\n */\nfunction UnControlledTabGroup({ defaultIndex = 0, onSelect, ...rest }: Props) {\n  const [selectedIndex, setSelectedIndex] = useState(defaultIndex);\n  const onSelectRef = useRefValue(onSelect);\n\n  const handleTabSelect: TabSelectCallback = useCallback(\n    (tabIndex, prevSelectedIndex, event) => {\n      const onSelectProps = onSelectRef.current;\n      const preventTabChange =\n        !!onSelectProps &&\n        onSelectProps(tabIndex, prevSelectedIndex, event) === false;\n\n      if (preventTabChange) {\n        return;\n      }\n\n      setSelectedIndex(tabIndex);\n    },\n    [onSelectRef],\n  );\n  return (\n    <InnerTabGroup\n      {...rest}\n      onSelect={handleTabSelect}\n      selectedIndex={selectedIndex}\n    />\n  );\n}\n\n/**\n * 多标签页组件\n */\nfunction TabGroup({ selectedIndex, ...rest }: Props) {\n  const isUnControlled = useRef(selectedIndex === undefined);\n  return isUnControlled.current ? (\n    <UnControlledTabGroup {...rest} />\n  ) : (\n    <InnerTabGroup selectedIndex={selectedIndex} {...rest} />\n  );\n}\n\nexport default TabGroup;\n","import React from 'react';\n\ninterface TabHeaderContextState {\n  /**\n   * 是否是密集模式\n   */\n  dense?: boolean;\n\n  /**\n   * 变更当前选项卡\n   */\n  onSelect: (\n    tabIndex: number,\n    event: React.MouseEvent | React.KeyboardEvent,\n  ) => void;\n}\n\n/**\n * 标签头部上下文\n */\nconst TabHeaderContext = React.createContext<TabHeaderContextState | null>(\n  null,\n);\n\nexport default TabHeaderContext;\n","import React from 'react';\n\nexport interface TabProps {\n  disabled?: boolean;\n}\n\nexport interface TabListContextState {\n  /**\n   * 注册标签页\n   */\n  register: (tabId: string, props: TabProps) => number;\n  /**\n   * 取消注册标签页\n   */\n  unregister: (tabId: string) => void;\n  /**\n   * 当前选中标签页的索引。索引从 0 开始。\n   */\n  selectedIndex: number;\n  /**\n   * 获取所有标签页的id\n   */\n  getTabs(): string[];\n  getTabProps(tabId: string): TabProps;\n}\n\n/**\n * 标签列表上下文\n */\nconst TabListContext = React.createContext<TabListContextState | null>(null);\n\nexport default TabListContext;\n","import { useEffect, useState, useRef, useCallback, useMemo } from 'react';\nimport { TabProps } from '../TabListContext';\n\n/**\n * 标签页列表状态管理\n */\nfunction useTabList(selectedIndex: number) {\n  const [renderCount, setRenderCount] = useState(1); // 内部 tab 发生变化引起重绘的次数\n  const isRenderredRef = useRef(false); // 是否已经同步渲染过\n  const tabsRef = useRef<string[]>([]); // 所有包含标签页（无序的）\n  const sortedTabsRef = useRef<string[]>([]); // 包含的有序的标签页\n  const tabsPropsRef = useRef<{ [name: string]: TabProps }>({});\n  sortedTabsRef.current = []; // TODO: current mode 可能会有缺陷，参见： https://github.com/facebook/react/issues/14099\n  isRenderredRef.current = false; // TODO: current mode 可能会有缺陷，参见： https://github.com/facebook/react/issues/14099\n\n  useEffect(() => {\n    isRenderredRef.current = true;\n  });\n\n  /**\n   * 注册标签页\n   */\n  const register = useCallback((tabId: string, props: TabProps) => {\n    const sortedTabs = sortedTabsRef.current;\n    const currentIdx = sortedTabs.indexOf(tabId);\n    if (isRenderredRef.current && currentIdx === -1) {\n      setRenderCount((state) => state + 1);\n      return -1;\n    }\n\n    const isAdded = tabsRef.current.indexOf(tabId) !== -1;\n\n    if (!isAdded) {\n      tabsRef.current.push(tabId);\n      tabsPropsRef.current[tabId] = props;\n    }\n\n    if (currentIdx !== -1) {\n      return currentIdx;\n    }\n\n    const idx = sortedTabs.length;\n    sortedTabs.push(tabId);\n\n    return idx;\n  }, []);\n\n  /**\n   * 取消注册标签页\n   */\n  const unregister = useCallback((tabId: string) => {\n    const sortedTabs = sortedTabsRef.current;\n    const tabs = tabsRef.current;\n    const idx = sortedTabs.indexOf(tabId);\n\n    const tabIdx = tabs.indexOf(tabId);\n    if (tabIdx !== -1) {\n      tabs.splice(tabIdx, 1);\n      delete tabsPropsRef.current[tabId];\n    }\n\n    if (idx !== -1) {\n      sortedTabs.splice(idx, 1);\n\n      setRenderCount((state) => state + 1);\n    }\n  }, []);\n\n  /**\n   * 获取所有标签id\n   */\n  const getTabs = useCallback(() => {\n    return sortedTabsRef.current;\n  }, []);\n\n  /**\n   * 获取指定id的属性\n   */\n  const getTabProps = useCallback((tabId: string) => {\n    return tabsPropsRef.current[tabId];\n  }, []);\n\n  return useMemo(\n    () => ({\n      register,\n      unregister,\n      selectedIndex,\n      renderCount,\n      getTabs,\n      getTabProps,\n    }),\n    [getTabProps, getTabs, register, renderCount, selectedIndex, unregister],\n  );\n}\n\nexport default useTabList;\n","import styled from 'styled-components';\n\nconst TabContentWrapper = styled.div`\n  overflow-x: hidden;\n\n  transition: height 0.5s cubic-bezier(0.15, 0.3, 0.25, 1) 0s;\n`;\n\nexport default TabContentWrapper;\n","import styled from 'styled-components';\n\nconst TabPanelListWrapper = styled.div`\n  display: flex;\n  align-items: flex-start;\n  transition: transform 0.35s cubic-bezier(0.15, 0.3, 0.25, 1) 0s;\n  will-change: transform;\n\n  & > .sinoui-tab-panel-hidden {\n    height: 0px;\n  }\n`;\n\nexport default TabPanelListWrapper;\n","import React, { useMemo, useRef, useEffect } from 'react';\nimport classNames from 'classnames';\nimport TabContentContext from '../TabContentContext';\nimport TabContentWrapper from './TabContentWrapper';\nimport TabPanelListWrapper from './TabPanelListWrapper';\nimport useTabList from '../commons/useTabList';\nimport TabListContext, { TabListContextState } from '../TabListContext';\n\nexport interface Props {\n  children?: React.ReactNode;\n  /**\n   * 指定自定义样式名\n   */\n  className?: string;\n  /**\n   * 指定自定义样式\n   */\n  style?: React.CSSProperties;\n  /**\n   * 设置当前选中的标签页。这是一个从 `0` 开始的索引，第一个标签页的索引为 `0`，第二个标签页的索引为 `1`，……\n   */\n  selectedIndex: number;\n  /**\n   * 默认情况下只有当前标签面板会渲染到 DOM 中（出于性能考量）。如果设置为 `true`，则所有的标签面板从一开始就会立即渲染到 DOM 中。默认为 `false`。\n   */\n  forceRenderTabPanel?: boolean;\n  /**\n   * 设置启动标签面板渲染到 DOM 的缓存特性。当`forceRenderTabPanel` 为 `false` 此配置才有效。默认为 `true`。如果设置为 `false`，则不会缓存标签面板的渲染，标签切换后，销毁该标签面板的DOM。\n   */\n  cacheable?: boolean;\n  /**\n   * 设置启用标签面板切换时内容高度过渡动画。默认为 `false`，不启用。设置为 `true`，启用高度过渡动画，但是可能会影响性能。\n   */\n  animateHeight?: boolean;\n}\n\n/**\n * 应用高度动画的hook。\n *\n * @param animateHeight 是否启用高度动画\n * @param selectedIndex 当前标签的索引位置\n * @param tabContentRef 标签内容容器DOM\n * @param tabListContext 标签列表上下文\n */\nfunction useAnimateHeight(\n  animateHeight: boolean,\n  selectedIndex: number,\n  tabContentRef: React.RefObject<HTMLDivElement>,\n  tabListContext: TabListContextState,\n) {\n  const prevSelectedIndexRef = useRef(selectedIndex);\n\n  useEffect(() => {\n    const prevSelectedIndex = prevSelectedIndexRef.current;\n    const tabContent = tabContentRef.current;\n    prevSelectedIndexRef.current = selectedIndex;\n\n    if (prevSelectedIndex === selectedIndex || !tabContent || !animateHeight) {\n      return undefined;\n    }\n\n    const tabs = tabListContext.getTabs();\n    const prev = tabContent.querySelector(\n      `#${tabs[prevSelectedIndex]}`,\n    ) as HTMLElement;\n    const current = tabContent.querySelector(\n      `#${tabs[selectedIndex]}`,\n    ) as HTMLElement;\n    prev.style.height = 'auto';\n    current.style.height = '';\n    const { height: prevHeight } = prev.getBoundingClientRect();\n    const { height } = current.getBoundingClientRect();\n\n    tabContent.style.height = `${prevHeight}px`;\n    tabContent.style.overflow = 'hidden';\n\n    let isEnd = false;\n    const reset = () => {\n      isEnd = true;\n      tabContent.style.transition = '';\n      tabContent.style.height = '';\n      tabContent.style.overflow = '';\n      prev.style.height = '';\n    };\n\n    const rafId = requestAnimationFrame(() => {\n      tabContent.style.height = `${height}px`;\n    });\n\n    const timeoutId = setTimeout(reset, 500);\n\n    return () => {\n      cancelAnimationFrame(rafId);\n      clearTimeout(timeoutId);\n      if (!isEnd) {\n        reset();\n      }\n    };\n  }, [animateHeight, selectedIndex, tabContentRef, tabListContext]);\n}\n\n/**\n * 选项卡组件的内容组件\n */\nexport default function TabContent(props: Props) {\n  const {\n    className,\n    selectedIndex,\n    children,\n    forceRenderTabPanel,\n    cacheable,\n    animateHeight = false,\n    ...rest\n  } = props;\n  const tabListContext = useTabList(selectedIndex);\n  const context = useMemo(\n    () => ({\n      inTabContent: true,\n      forceRenderTabPanel,\n      cacheable,\n    }),\n    [cacheable, forceRenderTabPanel],\n  );\n  const transform = useMemo(\n    () => `translate3d(-${100 * selectedIndex}%, 0px, 0px)`,\n    [selectedIndex],\n  );\n\n  const tabContentRef = useRef<HTMLDivElement>(null);\n  useAnimateHeight(animateHeight, selectedIndex, tabContentRef, tabListContext);\n\n  return (\n    <TabListContext.Provider value={tabListContext}>\n      <TabContentContext.Provider value={context}>\n        <TabContentWrapper\n          className={classNames('sinoui-tab-content', className)}\n          {...rest}\n          ref={tabContentRef}\n        >\n          <TabPanelListWrapper\n            style={{ transform }}\n            className=\"sinoui-tab-panel-list\"\n          >\n            {children}\n          </TabPanelListWrapper>\n        </TabContentWrapper>\n      </TabContentContext.Provider>\n    </TabListContext.Provider>\n  );\n}\n","import TabContent from './TabContent';\n\nexport default TabContent;\n","import { useEffect } from 'react';\n\n/**\n * 在组件初次渲染时阻止 transition 动画\n */\nfunction usePreventTransitionWhenMount<T extends HTMLElement>(\n  elementRef: React.RefObject<T>,\n) {\n  useEffect(() => {\n    const element = elementRef.current;\n    if (element) {\n      const { transition } = element.style;\n      element.style.transition = 'none';\n      const rafId = requestAnimationFrame(() => {\n        element.style.transition = transition;\n      });\n\n      return () => cancelAnimationFrame(rafId);\n    }\n    return undefined;\n  }, [elementRef]);\n}\n\nexport default usePreventTransitionWhenMount;\n","import styled, { css } from 'styled-components';\n\ninterface Props {\n  borderless?: boolean;\n}\n\nconst borderCss = css`\n  border-bottom: 1px solid rgba(0, 0, 0, 0.12);\n`;\n\nconst TabHeaderWrapper = styled.div<Props>`\n  display: flex;\n  overflow: hidden;\n  flex-shrink: 0;\n  font-size: 1rem;\n  color: ${(props) => props.theme.palette.text.primary};\n\n  ${(props) => !props.borderless && borderCss}\n\n  .sinoui-tab-label-container {\n    display: flex;\n    flex-grow: 1;\n    overflow: hidden;\n    z-index: 1;\n  }\n\n  .sinoui-tab-list {\n    flex-grow: 1;\n    position: relative;\n    transition: transform 0.5s cubic-bezier(0.35, 0, 0.25, 1);\n  }\n\n  .sinoui-tab-labels {\n    display: flex;\n    position: relative;\n  }\n\n  .sinoui-tab-header-extra-content {\n    line-height: 48px;\n  }\n`;\n\nexport default TabHeaderWrapper;\n","import styled, { css } from 'styled-components';\n\nconst topCss = css`\n  top: 0;\n`;\n\ninterface Props {\n  top?: boolean;\n}\n\n/**\n * 选择指示器\n */\nconst InkBar = styled.div.attrs({\n  className: 'sinoui-ink-bar',\n})<Props>`\n  position: absolute;\n  bottom: 0;\n  ${(props) => props.top && topCss};\n  left: 0;\n  transition: ${(props) =>\n    props.theme.transitions.create(['transform', 'width'])};\n  height: 2px;\n  background-color: ${(props) => props.theme.palette.primary[500]};\n`;\n\nexport default InkBar;\n","import React, { useEffect, useRef } from 'react';\nimport usePreventTransitionWhenMount from '../../helpers/usePreventTransitionWhenMount';\nimport TabHeaderWrapper from './TabHeaderWrapper';\nimport InkBar from '../InkBar';\n\ninterface Props {\n  children: React.ReactNode;\n  /**\n   * 在标签右侧添加附件内容。\n   */\n  extraContent?: React.ReactNode;\n  /**\n   * 设置不显示底部线条。默认为 `false`。\n   */\n  borderless?: boolean;\n}\n\nfunction InnerTabHeader({ children, extraContent, borderless }: Props) {\n  const tabListRef = useRef<HTMLDivElement>(null);\n  const inkBarRef = useRef<HTMLDivElement>(null);\n\n  usePreventTransitionWhenMount(inkBarRef);\n\n  useEffect(() => {\n    const inkBar = inkBarRef.current;\n    const tabList = tabListRef.current;\n    if (inkBar && tabList) {\n      const activeTab = tabList.querySelector('.sinoui-tab-label-active');\n      if (activeTab) {\n        const { width, left } = activeTab.getBoundingClientRect();\n        const { left: containerLeft } = tabList.getBoundingClientRect();\n        inkBar.style.width = `${width}px`;\n        inkBar.style.transform = `translate3d(${left -\n          containerLeft}px, 0px, 0px)`;\n      }\n    }\n  });\n\n  return (\n    <TabHeaderWrapper\n      className=\"sinoui-tab-header\"\n      role=\"tablist\"\n      borderless={borderless}\n    >\n      <div className=\"sinoui-tab-label-container\">\n        <div className=\"sinoui-tab-list\" ref={tabListRef}>\n          <div className=\"sinoui-tab-labels\">{children}</div>\n          <InkBar ref={inkBarRef} data-testid=\"inkbar\" />\n        </div>\n        {extraContent ? (\n          <div className=\"sinoui-tab-header-extra-content\">{extraContent}</div>\n        ) : null}\n      </div>\n    </TabHeaderWrapper>\n  );\n}\n\nexport default InnerTabHeader;\n","import React, { useMemo } from 'react';\nimport TabHeaderContext from '../TabHeaderContext';\nimport useRefValue from '../../helpers/useRefValue';\nimport InnerTabHeader from './InnerTabHeader';\nimport TabListContext from '../TabListContext';\nimport useTabList from '../commons/useTabList';\n\ninterface Props {\n  children?: React.ReactNode;\n  /**\n   * 指定在密集模式下使用。\n   */\n  dense?: boolean;\n  /**\n   * 设置当前选中的标签页。这是一个从 `0` 开始的索引，第一个标签页的索引为 `0`，第二个标签页的索引为 `1`，……\n   */\n  selectedIndex: number;\n  /**\n   * 每次标签页切换时调用的事件处理器。这个函数的 `index` 参数是新的选中标签页索引，`lastIndex` 参数是变更之前选中的标签页索引，`event` 参数是引起页签切换的事件，可能是 `keydown` 或者 `click` 事件。如果 `index` 和 `lastIndex` 相同时，表示用户在当前选中的标签页上点击。\n   */\n  onSelect?: (\n    index: number,\n    lastIndex: number,\n    event: React.MouseEvent | React.KeyboardEvent,\n  ) => boolean | undefined | void;\n  /**\n   * 在标签右侧添加附件内容。\n   */\n  extraContent?: React.ReactNode;\n  /**\n   * 设置不显示底部线条。默认为 `false`。\n   */\n  borderless?: boolean;\n}\n\n/**\n * 选项卡头部组件\n *\n */\nfunction TabHeader({\n  children,\n  dense,\n  selectedIndex = 0,\n  onSelect,\n  extraContent,\n  borderless,\n}: Props) {\n  const tabList = useTabList(selectedIndex);\n\n  const onSelectRef = useRefValue(onSelect);\n\n  const context = useMemo(\n    () => ({\n      dense,\n      onSelect: (\n        tabIndex: number,\n        event: React.MouseEvent | React.KeyboardEvent,\n      ) => {\n        if (onSelectRef.current) {\n          onSelectRef.current(tabIndex, selectedIndex, event);\n        }\n      },\n    }),\n    [dense, onSelectRef, selectedIndex],\n  );\n\n  return (\n    <TabListContext.Provider value={tabList}>\n      <TabHeaderContext.Provider value={context}>\n        <InnerTabHeader extraContent={extraContent} borderless={borderless}>\n          {children}\n        </InnerTabHeader>\n      </TabHeaderContext.Provider>\n    </TabListContext.Provider>\n  );\n}\n\nexport default TabHeader;\n","import TabHeader from './TabHeader';\n\nexport default TabHeader;\n","import { useRef } from 'react';\n\n/**\n * 使用同步的“变量”\n */\nfunction useRefValue<T>(value: T) {\n  const ref = useRef(value);\n\n  ref.current = value;\n\n  return ref;\n}\n\nexport default useRefValue;\n"],"sourceRoot":""}