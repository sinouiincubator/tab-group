{"version":3,"sources":["/Users/sinosoft/Documents/GitHub/tab-group/docs/apis/Tab.mdx","/Users/sinosoft/Documents/GitHub/tab-group/src/components/TabContentContext.ts","/Users/sinosoft/Documents/GitHub/tab-group/src/components/TabHeaderContext.ts","/Users/sinosoft/Documents/GitHub/tab-group/src/components/TabListContext.ts","/Users/sinosoft/Documents/GitHub/tab-group/src/components/commons/useTabId.ts","/Users/sinosoft/Documents/GitHub/tab-group/src/components/commons/useTabRegister.ts","/Users/sinosoft/Documents/GitHub/tab-group/src/components/tab-header-item/TabHeaderItemWrapper.tsx","/Users/sinosoft/Documents/GitHub/tab-group/src/components/tab-header-item/TabHeaderItem.tsx","/Users/sinosoft/Documents/GitHub/tab-group/src/components/tab-header-item/index.ts","/Users/sinosoft/Documents/GitHub/tab-group/src/components/tab-panel/TabPanelWrapper.tsx","/Users/sinosoft/Documents/GitHub/tab-group/src/components/tab-panel/TabPanel.tsx","/Users/sinosoft/Documents/GitHub/tab-group/src/components/tab-panel/index.ts","/Users/sinosoft/Documents/GitHub/tab-group/src/components/tab/useInTabHeader.ts","/Users/sinosoft/Documents/GitHub/tab-group/src/components/tab/useInTabContent.ts","/Users/sinosoft/Documents/GitHub/tab-group/src/components/tab/Tab.tsx","/Users/sinosoft/Documents/GitHub/tab-group/src/constants.ts","/Users/sinosoft/Documents/GitHub/tab-group/src/helpers/useRefValue.ts","/Users/sinosoft/Documents/GitHub/tab-group/src/helpers/uuid.ts"],"names":["layoutProps","MDXLayout","MDXContent","components","props","mdxType","of","Tab","isMDXComponent","TabContentContext","React","createContext","TabHeaderContext","TabListContext","useTabId","useMemo","uuid","useTabRegister","context","useContext","tabId","index","register","unregisterRef","useRefValue","unregister","undefined","useEffect","current","hoverCss","css","activeCss","theme","palette","primary","disabledCss","text","disabled","TabHeaderItemWrapper","styled","div","active","TabHeaderItem","title","className","style","id","rest","tabListContext","tabHeaderContext","selectedIndex","isActive","rippleRef","useRipple","handleClick","useCallback","event","onSelect","handleKeyDown","keyCode","getTabs","getTabProps","tabs","RIGHT_KEY_CODE","BOTTOM_KEY_CODE","stopPropagation","preventDefault","nextTab","getNextTabIndex","i","length","LEFT_KEY_CODE","TOP_KEY_CODE","prevTab","getPrevTabIndex","classNames","onClick","ref","data-testid","role","tabIndex","aria-disabled","aria-selected","onKeyDown","hiddenCss","TabPanelWrapper","TabPanel","children","forceRenderContent","cacheable","other","useIsActive","isNeedRendered","isCacheable","isNeedRenderedRef","useRef","useIsNeedRendered","tabContentContext","useIsCacheable","isForceRenderContent","forceRenderTabPanel","useIsForceRenderContent","renderingChildren","activeChildren","useRenderingChildren","aria-hidden","aria-labelledby","useInTabHeader","useInTabContent","isInTabHeader","isInTabContent","DEBOUNCE_WAIT","value","count","reset"],"mappings":"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","file":"static/js/docs-apis-tab.d57b46e7.js","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport { Playground, Props } from 'docz';\nimport Tab from '../../src/components/tab/Tab';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"tab\"\n    }}>{`Tab`}</h1>\n    <Props of={Tab} mdxType=\"Props\" />\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","import React from 'react';\n\ninterface TabContentContextState {\n  inTabContent: boolean;\n  /**\n   * 是否立即渲染所有的标签面板到 DOM 中。\n   */\n  forceRenderTabPanel?: boolean;\n  /**\n   * 设置启动标签面板渲染到 DOM 的缓存特性。\n   */\n  cacheable?: boolean;\n}\n\n/**\n * 标签页内容上下文\n */\nconst TabContentContext = React.createContext<TabContentContextState | null>(\n  null,\n);\n\nexport default TabContentContext;\n","import React from 'react';\n\ninterface TabHeaderContextState {\n  /**\n   * 是否是密集模式\n   */\n  dense?: boolean;\n\n  /**\n   * 变更当前选项卡\n   */\n  onSelect: (\n    tabIndex: number,\n    event: React.MouseEvent | React.KeyboardEvent,\n  ) => void;\n}\n\n/**\n * 标签头部上下文\n */\nconst TabHeaderContext = React.createContext<TabHeaderContextState | null>(\n  null,\n);\n\nexport default TabHeaderContext;\n","import React from 'react';\n\nexport interface TabProps {\n  disabled?: boolean;\n}\n\nexport interface TabListContextState {\n  /**\n   * 注册标签页\n   */\n  register: (tabId: string, props: TabProps) => number;\n  /**\n   * 取消注册标签页\n   */\n  unregister: (tabId: string) => void;\n  /**\n   * 当前选中标签页的索引。索引从 0 开始。\n   */\n  selectedIndex: number;\n  /**\n   * 获取所有标签页的id\n   */\n  getTabs(): string[];\n  getTabProps(tabId: string): TabProps;\n}\n\n/**\n * 标签列表上下文\n */\nconst TabListContext = React.createContext<TabListContextState | null>(null);\n\nexport default TabListContext;\n","import { useMemo } from 'react';\nimport uuid from '../../helpers/uuid';\n\n/**\n * 生成标签id\n */\nfunction useTabId() {\n  const tabId = useMemo(uuid, []);\n\n  return tabId;\n}\n\nexport default useTabId;\n","import { useContext, useEffect } from 'react';\nimport useRefValue from '../../helpers/useRefValue';\nimport TabListContext, { TabProps } from '../TabListContext';\nimport useTabId from './useTabId';\n\n/**\n * 注册标签页\n */\n\nfunction useTabRegister(props?: TabProps): [string, number] {\n  const context = useContext(TabListContext);\n  const tabId = useTabId();\n  const index = context ? context.register(tabId, props || {}) : -1;\n  const unregisterRef = useRefValue(context ? context.unregister : undefined);\n\n  useEffect(() => {\n    const unregister = unregisterRef.current;\n\n    if (unregister) {\n      return () => unregister(tabId);\n    }\n    return undefined;\n  }, [tabId, unregisterRef]);\n\n  return [tabId, index];\n}\n\nexport default useTabRegister;\n","import styled, { css } from 'styled-components';\n\nconst hoverCss = css`\n  &:hover {\n    opacity: 1;\n  }\n`;\n\nconst activeCss = css`\n  color: ${(props) => props.theme.palette.primary[500]};\n  opacity: 1;\n`;\n\nconst disabledCss = css`\n  cursor: not-allowed;\n  color: ${(props) => props.theme.palette.text.disabled};\n`;\n\ninterface TabHeaderItemWrapperProps {\n  disabled?: boolean;\n  active?: boolean;\n}\n\nconst TabHeaderItemWrapper = styled.div<TabHeaderItemWrapperProps>`\n  height: 48px;\n  padding: 0 24px;\n  cursor: pointer;\n  box-sizing: border-box;\n  opacity: 0.6;\n  text-align: center;\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  white-space: nowrap; /* 不换行显示 */\n  color: ${(props) => props.theme.palette.text.primary};\n  outline: none;\n  user-select: none;\n  flex-shrink: 0;\n  letter-spacing: 1.25px;\n  font-weight: 500;\n  position: relative;\n  white-space: nowrap;\n  transition: opacity 0.25s cubic-bezier(0.4, 0, 0.2, 1),\n    color 0.25s cubic-bezier(0.4, 0, 0.2, 1);\n\n  ${(props) => !props.disabled && hoverCss};\n  ${(props) => props.disabled && disabledCss};\n  ${(props) => props.active && activeCss};\n`;\n\nexport default TabHeaderItemWrapper;\n","import React, { useContext, useCallback } from 'react';\nimport classNames from 'classnames';\nimport { useRipple } from '@sinoui/ripple';\nimport {\n  LEFT_KEY_CODE,\n  TOP_KEY_CODE,\n  RIGHT_KEY_CODE,\n  BOTTOM_KEY_CODE,\n} from '../../constants';\nimport TabHeaderItemWrapper from './TabHeaderItemWrapper';\nimport TabListContext from '../TabListContext';\nimport useTabRegister from '../commons/useTabRegister';\nimport TabHeaderContext from '../TabHeaderContext';\n\ninterface Props {\n  /**\n   * 标签标题\n   */\n  title: React.ReactNode;\n  /**\n   * 指定自定义样式名\n   */\n  className?: string;\n  /**\n   * 指定自定义样式\n   */\n  style?: React.CSSProperties;\n  /**\n   * 设置为 `true`，则禁用标签。\n   */\n  disabled?: boolean;\n  /**\n   * 指定标签页id\n   */\n  id?: string;\n}\n\n/**\n * 获取下一个可用的tab索引\n *\n * @param {number} selectedIndex\n * @param {string[]} tabs\n * @param {(tabId: string) => { disabled?: boolean }} getTabProps\n * @returns\n */\nfunction getNextTabIndex(\n  selectedIndex: number,\n  tabs: string[],\n  getTabProps: (tabId: string) => { disabled?: boolean },\n): number {\n  let i = selectedIndex + 1;\n  for (; i < tabs.length; i += 1) {\n    const tabId = tabs[i];\n    const tabDisabled = getTabProps(tabId).disabled;\n    if (!tabDisabled) {\n      return i;\n    }\n  }\n\n  if (i === tabs.length) {\n    return getNextTabIndex(-1, tabs, getTabProps);\n  }\n\n  return 0;\n}\n\n/**\n * 获取上一个可用标签页的索引\n *\n * @param {number} selectedIndex\n * @param {string[]} tabs\n * @param {(tabId: string) => { disabled?: boolean }} getTabProps\n * @returns\n */\nfunction getPrevTabIndex(\n  selectedIndex: number,\n  tabs: string[],\n  getTabProps: (tabId: string) => { disabled?: boolean },\n): number {\n  let i = selectedIndex - 1;\n  for (; i > 0; i -= 1) {\n    const tabId = tabs[i];\n    const tabDisabled = getTabProps(tabId).disabled;\n    if (!tabDisabled) {\n      return i;\n    }\n  }\n\n  if (selectedIndex === 0) {\n    return getPrevTabIndex(tabs.length, tabs, getTabProps);\n  }\n\n  return 0;\n}\n\n/**\n * 头部选项卡项组件\n */\nfunction TabHeaderItem({\n  title,\n  className,\n  style,\n  disabled,\n  id,\n  ...rest\n}: Props) {\n  const tabListContext = useContext(TabListContext);\n  const tabHeaderContext = useContext(TabHeaderContext);\n  const [tabId, index] = useTabRegister({ disabled });\n  const selectedIndex = tabListContext ? tabListContext.selectedIndex : -1;\n  const isActive = index === selectedIndex;\n\n  const rippleRef = useRipple<HTMLDivElement>(undefined, disabled);\n\n  const handleClick = useCallback(\n    (event: React.MouseEvent) => {\n      if (tabHeaderContext) {\n        tabHeaderContext.onSelect(index, event);\n      }\n    },\n    [index, tabHeaderContext],\n  );\n\n  const handleKeyDown = useCallback(\n    (event: React.KeyboardEvent) => {\n      const { keyCode } = event;\n      if (tabListContext && tabHeaderContext) {\n        const { getTabs, getTabProps } = tabListContext;\n        const tabs = getTabs();\n        if (keyCode === RIGHT_KEY_CODE || keyCode === BOTTOM_KEY_CODE) {\n          event.stopPropagation();\n          event.preventDefault();\n          const nextTab = getNextTabIndex(selectedIndex, tabs, getTabProps);\n          tabHeaderContext.onSelect(nextTab, event);\n        } else if (keyCode === LEFT_KEY_CODE || keyCode === TOP_KEY_CODE) {\n          event.stopPropagation();\n          event.preventDefault();\n          const prevTab = getPrevTabIndex(selectedIndex, tabs, getTabProps);\n          tabHeaderContext.onSelect(prevTab, event);\n        }\n      }\n    },\n    [selectedIndex, tabHeaderContext, tabListContext],\n  );\n\n  if (index === -1) {\n    return null;\n  }\n\n  return (\n    <TabHeaderItemWrapper\n      className={classNames('sinoui-tab', className, {\n        'sinoui-tab--active': isActive,\n        'sinoui-tab--disabled': disabled,\n      })}\n      style={style}\n      disabled={disabled}\n      active={isActive}\n      onClick={disabled ? undefined : handleClick}\n      ref={rippleRef}\n      data-testid={`tab-header-item-${index}`}\n      role=\"tab\"\n      tabIndex={isActive ? 0 : -1}\n      aria-disabled={disabled}\n      aria-selected={isActive}\n      onKeyDown={disabled ? undefined : handleKeyDown}\n      id={id || tabId}\n      {...rest}\n    >\n      {title}\n    </TabHeaderItemWrapper>\n  );\n}\n\nexport default TabHeaderItem;\n","import TabHeaderItem from './TabHeaderItem';\n\nexport default TabHeaderItem;\n","import styled, { css } from 'styled-components';\n\ninterface Props {\n  active: boolean;\n}\n\nconst hiddenCss = css`\n  height: 0px;\n`;\n\nconst TabPanelWrapper = styled.div<Props>`\n  width: 100%;\n  flex-shrink: 0;\n  overflow: auto;\n\n  ${(props) => !props.active && hiddenCss};\n`;\n\nexport default TabPanelWrapper;\n","/* eslint-disable react/destructuring-assignment */\nimport React, { useContext, useRef, useEffect } from 'react';\nimport classNames from 'classnames';\nimport TabPanelWrapper from './TabPanelWrapper';\nimport TabListContext from '../TabListContext';\nimport useTabRegister from '../commons/useTabRegister';\nimport TabContentContext from '../TabContentContext';\n\ninterface TabPanelProps {\n  children: React.ReactNode;\n  /**\n   * 指定自定义样式名\n   */\n  className?: string;\n  /**\n   * 指定自定义样式\n   */\n  style?: React.CSSProperties;\n  /**\n   * 指定标签 id\n   */\n  tabId?: string;\n  /**\n   * 默认情况下，只有当前标签内容会渲染到 DOM 中。设置为 `true`，会在组件初始化时立即将标签内容渲染到 DOM 中。\n   */\n  forceRenderContent?: boolean;\n  /**\n   * 设置启用标签面板渲染到 DOM 的内容缓存。默认为 `true`。\n   */\n  cacheable?: boolean;\n}\n\n/**\n * 获取是否启用标签渲染缓存特性的hook。\n *\n * @param isCacheable 是否启用缓存特性的属性\n */\nfunction useIsCacheable(isCacheable?: boolean) {\n  const tabContentContext = useContext(TabContentContext);\n\n  if (typeof isCacheable === 'boolean') {\n    return isCacheable;\n  }\n\n  if (tabContentContext && typeof tabContentContext.cacheable === 'boolean') {\n    return tabContentContext.cacheable;\n  }\n\n  return true;\n}\n\n/**\n * 判断是否需要渲染标签面板的hook。\n *\n * @param isCacheable 是否启用了标签面板内容缓存\n * @param isActive 是否是当前标签面板\n */\nfunction useIsNeedRendered(isCacheable: boolean, isActive: boolean) {\n  const isNeedRenderedRef = useRef(false);\n\n  const isNeedRendered = isActive || (isCacheable && isNeedRenderedRef.current);\n\n  useEffect(() => {\n    if (isActive && isCacheable) {\n      isNeedRenderedRef.current = true;\n    }\n  });\n\n  return isNeedRendered;\n}\n\n/**\n * 判断是否是当前面板面板的hook。\n *\n * @param index 标签面板索引位置\n */\nfunction useIsActive(index: number) {\n  const context = useContext(TabListContext);\n  const selectedIndex = context ? context.selectedIndex : 0;\n\n  return index === selectedIndex;\n}\n\n/**\n * 判断是否强制渲染标签面板内容的hook。\n *\n * @param isForceRenderContent 是否强制渲染的属性\n */\nfunction useIsForceRenderContent(isForceRenderContent?: boolean) {\n  const tabContentContext = useContext(TabContentContext);\n\n  if (typeof isForceRenderContent === 'boolean') {\n    return isForceRenderContent;\n  }\n  return !!tabContentContext && tabContentContext.forceRenderTabPanel;\n}\n\n/**\n * 获取即将渲染的标签面板内容\n *\n * @param isActive 是否是当前标签\n * @param children 内容\n */\nfunction useRenderingChildren(isActive: boolean, children?: React.ReactNode) {\n  const activeChildren = useRef(children);\n  const renderingChildren = isActive ? children : activeChildren.current;\n\n  useEffect(() => {\n    if (isActive) {\n      activeChildren.current = children;\n    }\n  });\n\n  return renderingChildren;\n}\n\n/**\n * 标签页面板组件\n */\nexport default function TabPanel(props: TabPanelProps) {\n  const {\n    children,\n    className,\n    forceRenderContent,\n    cacheable,\n    ...other\n  } = props;\n  const [tabId, index] = useTabRegister();\n  const isActive = useIsActive(index);\n  const isCacheable = useIsCacheable(cacheable);\n  const isNeedRendered = useIsNeedRendered(isCacheable, isActive);\n  const isForceRenderContent = useIsForceRenderContent(forceRenderContent);\n  const renderingChildren = useRenderingChildren(isActive, children);\n\n  if (index === -1) {\n    return null;\n  }\n\n  return (\n    <TabPanelWrapper\n      data-testid={`tab-panel-${index}`}\n      role=\"tabpanel\"\n      aria-hidden={!isActive}\n      aria-labelledby={props.tabId}\n      id={tabId}\n      {...other}\n      className={classNames(\n        'sinoui-tab-panel',\n        {\n          'sinoui-tab-panel--active': isActive,\n        },\n        className,\n      )}\n      active={isActive}\n    >\n      {isNeedRendered || isForceRenderContent ? renderingChildren : null}\n    </TabPanelWrapper>\n  );\n}\n","import TabPanel from './TabPanel';\n\nexport default TabPanel;\n","import { useContext } from 'react';\nimport TabHeaderContext from '../TabHeaderContext';\n\nfunction useInTabHeader() {\n  const context = useContext(TabHeaderContext);\n\n  return !!context;\n}\n\nexport default useInTabHeader;\n","import { useContext } from 'react';\nimport TabContentContext from '../TabContentContext';\n\nfunction useInTabContent() {\n  const context = useContext(TabContentContext);\n\n  return !!context;\n}\n\nexport default useInTabContent;\n","import React from 'react';\nimport useInTabHeader from './useInTabHeader';\nimport useInTabContent from './useInTabContent';\nimport TabHeaderItem from '../tab-header-item';\nimport TabPanel from '../tab-panel';\n\ninterface Props {\n  /**\n   * 指定标签页标题。\n   */\n  title: React.ReactNode;\n  /**\n   * 指定标签页内容。\n   */\n  children: React.ReactNode;\n\n  /**\n   * 设置为 `true` 则禁用标签。默认为 `false`。\n   */\n  disabled?: boolean;\n\n  /**\n   * 指定标签id\n   */\n  id?: string;\n\n  /**\n   * 默认情况下，只有当前标签的内容会渲染到 DOM 中。设置为 `true`，则组件初始化时立即渲染标签面板内容到 DOM 中。\n   */\n  forceRenderTabPanel?: boolean;\n}\n\n/**\n * 标签页组件\n *\n * @param {Props} props\n * @returns\n */\nfunction Tab({ children, title, disabled, id, forceRenderTabPanel }: Props) {\n  const isInTabHeader = useInTabHeader();\n  const isInTabContent = useInTabContent();\n\n  if (isInTabHeader) {\n    return <TabHeaderItem title={title} disabled={disabled} id={id} />;\n  }\n\n  if (isInTabContent) {\n    return (\n      <TabPanel tabId={id} forceRenderContent={forceRenderTabPanel}>\n        {children}\n      </TabPanel>\n    );\n  }\n\n  return null;\n}\n\nexport default Tab;\n","export const LEFT_KEY_CODE = 37; // 方向键左\n\nexport const TOP_KEY_CODE = 38; // 方向键上\n\nexport const RIGHT_KEY_CODE = 39; // 方向键右\n\nexport const BOTTOM_KEY_CODE = 40; // 方向键下\n\n/**\n * 防抖函数的延时时长\n */\nexport const DEBOUNCE_WAIT = 166; // 10 帧，166 毫秒\n","import { useRef } from 'react';\n\n/**\n * 使用同步的“变量”\n */\nfunction useRefValue<T>(value: T) {\n  const ref = useRef(value);\n\n  ref.current = value;\n\n  return ref;\n}\n\nexport default useRefValue;\n","let count = 0;\n\n/**\n * 生成新的标签id\n */\nfunction uuid() {\n  const id = count;\n  count += 1;\n  return `tab-${id}`;\n}\n\n/**\n *  重置计数器\n */\nexport function reset() {\n  count = 0;\n}\n\nexport default uuid;\n"],"sourceRoot":""}