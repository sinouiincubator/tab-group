{"version":3,"sources":["D:/Users/jacki/Documents/GitHub/tab-group/docs/apis/TabPanel.mdx","D:/Users/jacki/Documents/GitHub/tab-group/src/components/TabContentContext.ts","D:/Users/jacki/Documents/GitHub/tab-group/src/components/TabListContext.ts","D:/Users/jacki/Documents/GitHub/tab-group/src/components/TabPanelContext.ts","D:/Users/jacki/Documents/GitHub/tab-group/src/components/commons/useTabId.ts","D:/Users/jacki/Documents/GitHub/tab-group/src/components/commons/useTabRegister.ts","D:/Users/jacki/Documents/GitHub/tab-group/src/components/tab-panel/TabPanelWrapper.tsx","D:/Users/jacki/Documents/GitHub/tab-group/src/components/tab-panel/TabPanel.tsx","D:/Users/jacki/Documents/GitHub/tab-group/src/helpers/useRefValue.ts","D:/Users/jacki/Documents/GitHub/tab-group/src/helpers/uuid.ts"],"names":["layoutProps","MDXLayout","MDXContent","components","props","mdxType","of","TabPanel","isMDXComponent","TabContentContext","React","createContext","TabListContext","TabPanelContext","useTabId","useMemo","uuid","useTabRegister","context","useContext","tabId","index","register","unregisterRef","useRefValue","unregister","undefined","useEffect","current","hiddenCss","css","TabPanelWrapper","styled","div","active","children","className","forceRenderContent","cacheable","other","isActive","selectedIndex","useIsActive","isNeedRendered","isCacheable","isNeedRenderedRef","useRef","useIsNeedRendered","tabContentContext","useIsCacheable","isForceRenderContent","forceRenderTabPanel","useIsForceRenderContent","renderingChildren","activeChildren","useRenderingChildren","Provider","value","data-testid","role","aria-hidden","aria-labelledby","id","classNames","ref","count","reset"],"mappings":"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","file":"static/js/docs-apis-tab-panel.9a00cd64.js","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport { Playground, Props } from 'docz';\nimport TabPanel from '../../src/components/tab-panel/TabPanel';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"tabpanel\"\n    }}>{`TabPanel`}</h1>\n    <Props of={TabPanel} mdxType=\"Props\" />\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","import React from 'react';\n\ninterface TabContentContextState {\n  inTabContent: boolean;\n  /**\n   * 是否立即渲染所有的标签面板到 DOM 中。\n   */\n  forceRenderTabPanel?: boolean;\n  /**\n   * 设置启动标签面板渲染到 DOM 的缓存特性。\n   */\n  cacheable?: boolean;\n  /**\n   * 变更当前选项卡\n   */\n  onSelect: (\n    tabIndex: number,\n    event: React.MouseEvent | React.KeyboardEvent,\n  ) => void;\n}\n\n/**\n * 标签页内容上下文\n */\nconst TabContentContext = React.createContext<TabContentContextState | null>(\n  null,\n);\n\nexport default TabContentContext;\n","import React from 'react';\n\nexport interface TabProps {\n  disabled?: boolean;\n}\n\nexport interface TabListContextState {\n  /**\n   * 注册标签页\n   */\n  register: (tabId: string, props: TabProps) => number;\n  /**\n   * 取消注册标签页\n   */\n  unregister: (tabId: string) => void;\n  /**\n   * 当前选中标签页的索引。索引从 0 开始。\n   */\n  selectedIndex: number;\n  /**\n   * 获取所有标签页的id\n   */\n  getTabs(): string[];\n  getTabProps(tabId: string): TabProps;\n}\n\n/**\n * 标签列表上下文\n */\nconst TabListContext = React.createContext<TabListContextState | null>(null);\n\nexport default TabListContext;\n","import React from 'react';\n\n/**\n * 内容区域上下文\n */\nconst TabPanelContext = React.createContext<string>('');\n\nexport default TabPanelContext;\n","import { useMemo } from 'react';\nimport uuid from '../../helpers/uuid';\n\n/**\n * 生成标签id\n */\nfunction useTabId() {\n  const tabId = useMemo(uuid, []);\n\n  return tabId;\n}\n\nexport default useTabId;\n","import { useContext, useEffect } from 'react';\nimport useRefValue from '../../helpers/useRefValue';\nimport TabListContext, { TabProps } from '../TabListContext';\nimport useTabId from './useTabId';\n\n/**\n * 注册标签页\n */\n\nfunction useTabRegister(props?: TabProps): [string, number] {\n  const context = useContext(TabListContext);\n  const tabId = useTabId();\n  const index = context ? context.register(tabId, props || {}) : -1;\n  const unregisterRef = useRefValue(context ? context.unregister : undefined);\n\n  useEffect(() => {\n    const unregister = unregisterRef.current;\n\n    if (unregister) {\n      return () => unregister(tabId);\n    }\n    return undefined;\n  }, [tabId, unregisterRef]);\n\n  return [tabId, index];\n}\n\nexport default useTabRegister;\n","import styled, { css } from 'styled-components';\n\ninterface Props {\n  active: boolean;\n}\n\nconst hiddenCss = css`\n  height: 0px;\n`;\n\nconst TabPanelWrapper = styled.div<Props>`\n  width: 100%;\n  flex-shrink: 0;\n  overflow: auto;\n\n  ${(props) => !props.active && hiddenCss};\n`;\n\nexport default TabPanelWrapper;\n","/* eslint-disable react/destructuring-assignment */\nimport React, { useContext, useRef, useEffect } from 'react';\nimport classNames from 'classnames';\nimport TabPanelWrapper from './TabPanelWrapper';\nimport TabListContext from '../TabListContext';\nimport useTabRegister from '../commons/useTabRegister';\nimport TabContentContext from '../TabContentContext';\nimport TabPanelContext from '../TabPanelContext';\n\ninterface TabPanelProps {\n  children: React.ReactNode;\n  /**\n   * 指定自定义样式名\n   */\n  className?: string;\n  /**\n   * 指定自定义样式\n   */\n  style?: React.CSSProperties;\n  /**\n   * 指定标签 id\n   */\n  tabId?: string;\n  /**\n   * 默认情况下，只有当前标签内容会渲染到 DOM 中。设置为 `true`，会在组件初始化时立即将标签内容渲染到 DOM 中。\n   */\n  forceRenderContent?: boolean;\n  /**\n   * 设置启用标签面板渲染到 DOM 的内容缓存。默认为 `true`。\n   */\n  cacheable?: boolean;\n}\n\n/**\n * 获取是否启用标签渲染缓存特性的hook。\n *\n * @param isCacheable 是否启用缓存特性的属性\n */\nfunction useIsCacheable(isCacheable?: boolean) {\n  const tabContentContext = useContext(TabContentContext);\n\n  if (typeof isCacheable === 'boolean') {\n    return isCacheable;\n  }\n\n  if (tabContentContext && typeof tabContentContext.cacheable === 'boolean') {\n    return tabContentContext.cacheable;\n  }\n\n  return true;\n}\n\n/**\n * 判断是否需要渲染标签面板的hook。\n *\n * @param isCacheable 是否启用了标签面板内容缓存\n * @param isActive 是否是当前标签面板\n */\nfunction useIsNeedRendered(isCacheable: boolean, isActive: boolean) {\n  const isNeedRenderedRef = useRef(false);\n\n  const isNeedRendered = isActive || (isCacheable && isNeedRenderedRef.current);\n\n  useEffect(() => {\n    if (isActive && isCacheable) {\n      isNeedRenderedRef.current = true;\n    }\n  });\n\n  return isNeedRendered;\n}\n\n/**\n * 判断是否是当前面板面板的hook。\n *\n * @param index 标签面板索引位置\n */\nfunction useIsActive(index: number) {\n  const context = useContext(TabListContext);\n  const selectedIndex = context ? context.selectedIndex : 0;\n\n  return index === selectedIndex;\n}\n\n/**\n * 判断是否强制渲染标签面板内容的hook。\n *\n * @param isForceRenderContent 是否强制渲染的属性\n */\nfunction useIsForceRenderContent(isForceRenderContent?: boolean) {\n  const tabContentContext = useContext(TabContentContext);\n\n  if (typeof isForceRenderContent === 'boolean') {\n    return isForceRenderContent;\n  }\n  return !!tabContentContext && tabContentContext.forceRenderTabPanel;\n}\n\n/**\n * 获取即将渲染的标签面板内容\n *\n * @param isActive 是否是当前标签\n * @param children 内容\n */\nfunction useRenderingChildren(isActive: boolean, children?: React.ReactNode) {\n  const activeChildren = useRef(children);\n  const renderingChildren = isActive ? children : activeChildren.current;\n\n  useEffect(() => {\n    if (isActive) {\n      activeChildren.current = children;\n    }\n  });\n\n  return renderingChildren;\n}\n\n/**\n * 标签页面板组件\n */\nexport default function TabPanel(props: TabPanelProps) {\n  const {\n    children,\n    className,\n    forceRenderContent,\n    cacheable,\n    ...other\n  } = props;\n  const [tabId, index] = useTabRegister();\n  const isActive = useIsActive(index);\n  const isCacheable = useIsCacheable(cacheable);\n  const isNeedRendered = useIsNeedRendered(isCacheable, isActive);\n  const isForceRenderContent = useIsForceRenderContent(forceRenderContent);\n  const renderingChildren = useRenderingChildren(isActive, children);\n\n  if (index === -1) {\n    return null;\n  }\n\n  return (\n    <TabPanelContext.Provider value={tabId}>\n      <TabPanelWrapper\n        data-testid={`tab-panel-${index}`}\n        role=\"tabpanel\"\n        aria-hidden={!isActive}\n        aria-labelledby={props.tabId}\n        id={tabId}\n        {...other}\n        className={classNames(\n          'sinoui-tab-panel',\n          {\n            'sinoui-tab-panel--active': isActive,\n          },\n          className,\n        )}\n        active={isActive}\n      >\n        {isNeedRendered || isForceRenderContent ? renderingChildren : null}\n      </TabPanelWrapper>\n    </TabPanelContext.Provider>\n  );\n}\n","import { useRef } from 'react';\n\n/**\n * 使用同步的“变量”\n */\nfunction useRefValue<T>(value: T) {\n  const ref = useRef(value);\n\n  ref.current = value;\n\n  return ref;\n}\n\nexport default useRefValue;\n","let count = 0;\n\n/**\n * 生成新的标签id\n */\nfunction uuid() {\n  const id = count;\n  count += 1;\n  return `tab-${id}`;\n}\n\n/**\n *  重置计数器\n */\nexport function reset() {\n  count = 0;\n}\n\nexport default uuid;\n"],"sourceRoot":""}