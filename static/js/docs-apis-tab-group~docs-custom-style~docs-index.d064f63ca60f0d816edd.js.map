{"version":3,"sources":["/Users/sinosoft/Documents/GitHub/tab-group/src/components/TabContentContext.ts","/Users/sinosoft/Documents/GitHub/tab-group/src/components/TabGroup.tsx","/Users/sinosoft/Documents/GitHub/tab-group/src/components/TabHeaderContext.ts","/Users/sinosoft/Documents/GitHub/tab-group/src/components/TabListContext.ts","/Users/sinosoft/Documents/GitHub/tab-group/src/components/commons/useTabList.ts","/Users/sinosoft/Documents/GitHub/tab-group/src/components/tab-content/TabContentWrapper.tsx","/Users/sinosoft/Documents/GitHub/tab-group/src/components/tab-content/TabPanelListWrapper.tsx","/Users/sinosoft/Documents/GitHub/tab-group/src/components/tab-content/TabContent.tsx","/Users/sinosoft/Documents/GitHub/tab-group/src/components/tab-content/index.ts","/Users/sinosoft/Documents/GitHub/tab-group/src/components/tab-header/TabHeaderWrapper.tsx","/Users/sinosoft/Documents/GitHub/tab-group/src/components/InkBar.tsx","/Users/sinosoft/Documents/GitHub/tab-group/src/components/tab-header/TabHeaderScrollButton.tsx","/Users/sinosoft/Documents/GitHub/tab-group/src/components/tab-header/NextIcon.tsx","/Users/sinosoft/Documents/GitHub/tab-group/src/components/tab-header/PrevIcon.tsx","/Users/sinosoft/Documents/GitHub/tab-group/src/helpers/usePreventTransitionWhenMount.ts","/Users/sinosoft/Documents/GitHub/tab-group/src/components/tab-header/useInkbarPositionSync.ts","/Users/sinosoft/Documents/GitHub/tab-group/src/components/tab-header/useScrollState.ts","/Users/sinosoft/Documents/GitHub/tab-group/src/components/tab-header/TabHeaderExtraContent.ts","/Users/sinosoft/Documents/GitHub/tab-group/src/components/tab-header/TabList.ts","/Users/sinosoft/Documents/GitHub/tab-group/src/components/tab-header/InnerTabHeader.tsx","/Users/sinosoft/Documents/GitHub/tab-group/src/components/tab-header/TabHeader.tsx","/Users/sinosoft/Documents/GitHub/tab-group/src/components/tab-header/index.ts","/Users/sinosoft/Documents/GitHub/tab-group/src/helpers/useRefValue.ts"],"names":["TabContentContext","React","createContext","InnerTabGroup","className","onSelect","selectedIndex","children","dense","forceRenderTabPanel","cacheable","animateHeight","tabHeaderExtraContent","borderless","rest","classNames","extraContent","UnControlledTabGroup","defaultIndex","useState","setSelectedIndex","onSelectRef","useRefValue","handleTabSelect","useCallback","tabIndex","prevSelectedIndex","event","onSelectProps","current","TabGroup","useRef","undefined","TabHeaderContext","TabListContext","useTabList","renderCount","setRenderCount","isRenderredRef","tabsRef","sortedTabsRef","tabsPropsRef","useEffect","register","tabId","props","sortedTabs","currentIdx","indexOf","state","push","idx","length","unregister","tabs","tabIdx","splice","getTabs","getTabProps","useMemo","TabContentWrapper","styled","div","TabPanelListWrapper","TabContent","tabListContext","context","inTabContent","transform","tabContentRef","prevSelectedIndexRef","tabContent","prev","querySelector","style","height","prevHeight","getBoundingClientRect","overflow","isEnd","reset","transition","rafId","requestAnimationFrame","timeoutId","setTimeout","cancelAnimationFrame","clearTimeout","useAnimateHeight","Provider","value","ref","borderCss","css","TabHeaderWrapper","theme","palette","text","primary","topCss","InkBar","attrs","top","transitions","create","TabHeaderScrollButtonWrapper","TabHeaderScrollButton","disabled","useRipple","aria-disabled","NextIcon","focusable","viewBox","aria-hidden","role","fill","width","d","PrevIcon","usePreventTransitionWhenMount","elementRef","element","useInkbarPositionSync","inkBarRef","tabListRef","inkBar","tabList","activeTab","left","containerLeft","scrollLeft","useScrollState","showScrollButtons","setShowScrollButtons","isPrevDisabled","setIsPrevDisabled","isNextDisabled","setIsNextDisabled","updateScrollButtonsState","scrollWidth","clientWidth","next","TabHeaderExtraContent","TabList","InnerTabHeader","onClick","data-testid","TabHeader"],"mappings":"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","file":"static/js/docs-apis-tab-group~docs-custom-style~docs-index.97d704b5.js","sourcesContent":["import React from 'react';\n\ninterface TabContentContextState {\n  inTabContent: boolean;\n  /**\n   * 是否立即渲染所有的标签面板到 DOM 中。\n   */\n  forceRenderTabPanel?: boolean;\n  /**\n   * 设置启动标签面板渲染到 DOM 的缓存特性。\n   */\n  cacheable?: boolean;\n}\n\n/**\n * 标签页内容上下文\n */\nconst TabContentContext = React.createContext<TabContentContextState | null>(\n  null,\n);\n\nexport default TabContentContext;\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport React, { useRef, useState, useCallback } from 'react';\nimport classNames from 'classnames';\nimport useRefValue from '../helpers/useRefValue';\nimport { TabSelectCallback } from '../types';\nimport TabHeader from './tab-header';\nimport TabContent from './tab-content';\n\ninterface Props {\n  /**\n   * 允许改变在初始渲染时显示第几个标签页的属性。默认为 `0`。这是一个从 `0` 开始的索引，第一个标签页的索引为 `0`，第二个标签页的索引为 `1`，……\n   */\n  defaultIndex?: number;\n  /**\n   * 设置当前选中的标签页。这是一个从 `0` 开始的索引，第一个标签页的索引为 `0`，第二个标签页的索引为 `1`，……\n   *\n   * 默认值为 null。\n   */\n  selectedIndex?: number;\n  /**\n   * 每次标签页切换时调用的事件处理器。这个函数的 `index` 参数是新的选中标签页索引，`lastIndex` 参数是变更之前选中的标签页索引，`event` 参数是引起页签切换的事件，可能是 `keydown` 或者 `click` 事件。如果 `index` 和 `lastIndex` 相同时，表示用户在当前选中的标签页上点击。\n   */\n  onSelect?: (\n    index: number,\n    lastIndex: number,\n    event: React.MouseEvent | React.KeyboardEvent,\n  ) => boolean | undefined | void;\n  /**\n   * 设置标签。可以是多个 `<Tab />` 元素。\n   */\n  children?: React.ReactNode;\n  /**\n   * 给标签页组件根元素指定新的样式名\n   */\n  className?: string;\n  /**\n   * 设置标签页组件根元素的样式\n   */\n  style?: React.CSSProperties;\n  /**\n   * 设置标签页在密集模式下展现。\n   */\n  dense?: boolean;\n  /**\n   * 默认情况下只有当前标签面板会渲染到 DOM 中（出于性能考量）。如果设置为 `true`，则所有的标签面板从一开始就会立即渲染到 DOM 中。默认为 `false`。\n   */\n  forceRenderTabPanel?: boolean;\n\n  /**\n   * 设置启动标签面板渲染到 DOM 的缓存特性。当`forceRenderTabPanel` 为 `false` 此配置才有效。默认为 `true`。如果设置为 `false`，则不会缓存标签面板的渲染，标签切换后，销毁该标签面板的DOM。\n   */\n  cacheable?: boolean;\n\n  /**\n   * 设置启用标签面板切换时内容高度过渡动画。默认为 `false`，不启用。设置为 `true`，启用高度过渡动画，但是可能会影响性能。\n   */\n  animateHeight?: boolean;\n  /**\n   * 在标签右侧添加附加内容。\n   */\n  tabHeaderExtraContent?: React.ReactNode;\n\n  /**\n   * 设置不显示标签条底部线条。\n   */\n  borderless?: boolean;\n}\n\nfunction InnerTabGroup({\n  className,\n  onSelect,\n  selectedIndex = 0,\n  children,\n  dense,\n  forceRenderTabPanel,\n  cacheable,\n  animateHeight,\n  tabHeaderExtraContent,\n  borderless,\n  ...rest\n}: Props) {\n  return (\n    <div className={classNames('sinoui-tab-group', className)} {...rest}>\n      <TabHeader\n        selectedIndex={selectedIndex}\n        dense={dense}\n        onSelect={onSelect}\n        extraContent={tabHeaderExtraContent}\n        borderless={borderless}\n      >\n        {children}\n      </TabHeader>\n      <TabContent\n        selectedIndex={selectedIndex}\n        forceRenderTabPanel={forceRenderTabPanel}\n        cacheable={cacheable}\n        animateHeight={animateHeight}\n      >\n        {children}\n      </TabContent>\n    </div>\n  );\n}\n\n/**\n * 受控模式的标签页组件\n */\nfunction UnControlledTabGroup({ defaultIndex = 0, onSelect, ...rest }: Props) {\n  const [selectedIndex, setSelectedIndex] = useState(defaultIndex);\n  const onSelectRef = useRefValue(onSelect);\n\n  const handleTabSelect: TabSelectCallback = useCallback(\n    (tabIndex, prevSelectedIndex, event) => {\n      const onSelectProps = onSelectRef.current;\n      const preventTabChange =\n        !!onSelectProps &&\n        onSelectProps(tabIndex, prevSelectedIndex, event) === false;\n\n      if (preventTabChange) {\n        return;\n      }\n\n      setSelectedIndex(tabIndex);\n    },\n    [onSelectRef],\n  );\n  return (\n    <InnerTabGroup\n      {...rest}\n      onSelect={handleTabSelect}\n      selectedIndex={selectedIndex}\n    />\n  );\n}\n\n/**\n * 多标签页组件\n */\nfunction TabGroup({ selectedIndex, ...rest }: Props) {\n  const isUnControlled = useRef(selectedIndex === undefined);\n  return isUnControlled.current ? (\n    <UnControlledTabGroup {...rest} />\n  ) : (\n    <InnerTabGroup selectedIndex={selectedIndex} {...rest} />\n  );\n}\n\nexport default TabGroup;\n","import React from 'react';\n\ninterface TabHeaderContextState {\n  /**\n   * 是否是密集模式\n   */\n  dense?: boolean;\n\n  /**\n   * 变更当前选项卡\n   */\n  onSelect: (\n    tabIndex: number,\n    event: React.MouseEvent | React.KeyboardEvent,\n  ) => void;\n}\n\n/**\n * 标签头部上下文\n */\nconst TabHeaderContext = React.createContext<TabHeaderContextState | null>(\n  null,\n);\n\nexport default TabHeaderContext;\n","import React from 'react';\n\nexport interface TabProps {\n  disabled?: boolean;\n}\n\nexport interface TabListContextState {\n  /**\n   * 注册标签页\n   */\n  register: (tabId: string, props: TabProps) => number;\n  /**\n   * 取消注册标签页\n   */\n  unregister: (tabId: string) => void;\n  /**\n   * 当前选中标签页的索引。索引从 0 开始。\n   */\n  selectedIndex: number;\n  /**\n   * 获取所有标签页的id\n   */\n  getTabs(): string[];\n  getTabProps(tabId: string): TabProps;\n}\n\n/**\n * 标签列表上下文\n */\nconst TabListContext = React.createContext<TabListContextState | null>(null);\n\nexport default TabListContext;\n","import { useEffect, useState, useRef, useCallback, useMemo } from 'react';\nimport { TabProps } from '../TabListContext';\n\n/**\n * 标签页列表状态管理\n */\nfunction useTabList(selectedIndex: number) {\n  const [renderCount, setRenderCount] = useState(1); // 内部 tab 发生变化引起重绘的次数\n  const isRenderredRef = useRef(false); // 是否已经同步渲染过\n  const tabsRef = useRef<string[]>([]); // 所有包含标签页（无序的）\n  const sortedTabsRef = useRef<string[]>([]); // 包含的有序的标签页\n  const tabsPropsRef = useRef<{ [name: string]: TabProps }>({});\n  sortedTabsRef.current = []; // TODO: current mode 可能会有缺陷，参见： https://github.com/facebook/react/issues/14099\n  isRenderredRef.current = false; // TODO: current mode 可能会有缺陷，参见： https://github.com/facebook/react/issues/14099\n\n  useEffect(() => {\n    isRenderredRef.current = true;\n  });\n\n  /**\n   * 注册标签页\n   */\n  const register = useCallback((tabId: string, props: TabProps) => {\n    const sortedTabs = sortedTabsRef.current;\n    const currentIdx = sortedTabs.indexOf(tabId);\n    if (isRenderredRef.current && currentIdx === -1) {\n      setRenderCount((state) => state + 1);\n      return -1;\n    }\n\n    const isAdded = tabsRef.current.indexOf(tabId) !== -1;\n\n    if (!isAdded) {\n      tabsRef.current.push(tabId);\n      tabsPropsRef.current[tabId] = props;\n    }\n\n    if (currentIdx !== -1) {\n      return currentIdx;\n    }\n\n    const idx = sortedTabs.length;\n    sortedTabs.push(tabId);\n\n    return idx;\n  }, []);\n\n  /**\n   * 取消注册标签页\n   */\n  const unregister = useCallback((tabId: string) => {\n    const sortedTabs = sortedTabsRef.current;\n    const tabs = tabsRef.current;\n    const idx = sortedTabs.indexOf(tabId);\n\n    const tabIdx = tabs.indexOf(tabId);\n    if (tabIdx !== -1) {\n      tabs.splice(tabIdx, 1);\n      delete tabsPropsRef.current[tabId];\n    }\n\n    if (idx !== -1) {\n      sortedTabs.splice(idx, 1);\n\n      setRenderCount((state) => state + 1);\n    }\n  }, []);\n\n  /**\n   * 获取所有标签id\n   */\n  const getTabs = useCallback(() => {\n    return sortedTabsRef.current;\n  }, []);\n\n  /**\n   * 获取指定id的属性\n   */\n  const getTabProps = useCallback((tabId: string) => {\n    return tabsPropsRef.current[tabId];\n  }, []);\n\n  return useMemo(\n    () => ({\n      register,\n      unregister,\n      selectedIndex,\n      renderCount,\n      getTabs,\n      getTabProps,\n    }),\n    [getTabProps, getTabs, register, renderCount, selectedIndex, unregister],\n  );\n}\n\nexport default useTabList;\n","import styled from 'styled-components';\n\nconst TabContentWrapper = styled.div`\n  overflow-x: hidden;\n\n  transition: height 0.5s cubic-bezier(0.15, 0.3, 0.25, 1) 0s;\n`;\n\nexport default TabContentWrapper;\n","import styled from 'styled-components';\n\nconst TabPanelListWrapper = styled.div`\n  display: flex;\n  align-items: flex-start;\n  transition: transform 0.35s cubic-bezier(0.15, 0.3, 0.25, 1) 0s;\n  will-change: transform;\n`;\n\nexport default TabPanelListWrapper;\n","import React, { useMemo, useRef, useEffect } from 'react';\nimport classNames from 'classnames';\nimport TabContentContext from '../TabContentContext';\nimport TabContentWrapper from './TabContentWrapper';\nimport TabPanelListWrapper from './TabPanelListWrapper';\nimport useTabList from '../commons/useTabList';\nimport TabListContext, { TabListContextState } from '../TabListContext';\n\nexport interface Props {\n  children?: React.ReactNode;\n  /**\n   * 指定自定义样式名\n   */\n  className?: string;\n  /**\n   * 指定自定义样式\n   */\n  style?: React.CSSProperties;\n  /**\n   * 设置当前选中的标签页。这是一个从 `0` 开始的索引，第一个标签页的索引为 `0`，第二个标签页的索引为 `1`，……\n   */\n  selectedIndex: number;\n  /**\n   * 默认情况下只有当前标签面板会渲染到 DOM 中（出于性能考量）。如果设置为 `true`，则所有的标签面板从一开始就会立即渲染到 DOM 中。默认为 `false`。\n   */\n  forceRenderTabPanel?: boolean;\n  /**\n   * 设置启动标签面板渲染到 DOM 的缓存特性。当`forceRenderTabPanel` 为 `false` 此配置才有效。默认为 `true`。如果设置为 `false`，则不会缓存标签面板的渲染，标签切换后，销毁该标签面板的DOM。\n   */\n  cacheable?: boolean;\n  /**\n   * 设置启用标签面板切换时内容高度过渡动画。默认为 `false`，不启用。设置为 `true`，启用高度过渡动画，但是可能会影响性能。\n   */\n  animateHeight?: boolean;\n}\n\n/**\n * 应用高度动画的hook。\n *\n * @param animateHeight 是否启用高度动画\n * @param selectedIndex 当前标签的索引位置\n * @param tabContentRef 标签内容容器DOM\n * @param tabListContext 标签列表上下文\n */\nfunction useAnimateHeight(\n  animateHeight: boolean,\n  selectedIndex: number,\n  tabContentRef: React.RefObject<HTMLDivElement>,\n  tabListContext: TabListContextState,\n) {\n  const prevSelectedIndexRef = useRef(selectedIndex);\n\n  useEffect(() => {\n    const prevSelectedIndex = prevSelectedIndexRef.current;\n    const tabContent = tabContentRef.current;\n    prevSelectedIndexRef.current = selectedIndex;\n\n    if (prevSelectedIndex === selectedIndex || !tabContent || !animateHeight) {\n      return undefined;\n    }\n\n    const tabs = tabListContext.getTabs();\n    const prev = tabContent.querySelector(\n      `#${tabs[prevSelectedIndex]}`,\n    ) as HTMLElement;\n    const current = tabContent.querySelector(\n      `#${tabs[selectedIndex]}`,\n    ) as HTMLElement;\n    prev.style.height = 'auto';\n    current.style.height = '';\n    const { height: prevHeight } = prev.getBoundingClientRect();\n    const { height } = current.getBoundingClientRect();\n\n    tabContent.style.height = `${prevHeight}px`;\n    tabContent.style.overflow = 'hidden';\n\n    let isEnd = false;\n    const reset = () => {\n      isEnd = true;\n      tabContent.style.transition = '';\n      tabContent.style.height = '';\n      tabContent.style.overflow = '';\n      prev.style.height = '';\n    };\n\n    const rafId = requestAnimationFrame(() => {\n      tabContent.style.height = `${height}px`;\n    });\n\n    const timeoutId = setTimeout(reset, 500);\n\n    return () => {\n      cancelAnimationFrame(rafId);\n      clearTimeout(timeoutId);\n      if (!isEnd) {\n        reset();\n      }\n    };\n  }, [animateHeight, selectedIndex, tabContentRef, tabListContext]);\n}\n\n/**\n * 选项卡组件的内容组件\n */\nexport default function TabContent(props: Props) {\n  const {\n    className,\n    selectedIndex,\n    children,\n    forceRenderTabPanel,\n    cacheable,\n    animateHeight = false,\n    ...rest\n  } = props;\n  const tabListContext = useTabList(selectedIndex);\n  const context = useMemo(\n    () => ({\n      inTabContent: true,\n      forceRenderTabPanel,\n      cacheable,\n    }),\n    [cacheable, forceRenderTabPanel],\n  );\n  const transform = useMemo(\n    () => `translate3d(-${100 * selectedIndex}%, 0px, 0px)`,\n    [selectedIndex],\n  );\n\n  const tabContentRef = useRef<HTMLDivElement>(null);\n  useAnimateHeight(animateHeight, selectedIndex, tabContentRef, tabListContext);\n\n  return (\n    <TabListContext.Provider value={tabListContext}>\n      <TabContentContext.Provider value={context}>\n        <TabContentWrapper\n          className={classNames('sinoui-tab-content', className)}\n          {...rest}\n          ref={tabContentRef}\n        >\n          <TabPanelListWrapper\n            style={{ transform }}\n            className=\"sinoui-tab-panel-list\"\n          >\n            {children}\n          </TabPanelListWrapper>\n        </TabContentWrapper>\n      </TabContentContext.Provider>\n    </TabListContext.Provider>\n  );\n}\n","import TabContent from './TabContent';\n\nexport default TabContent;\n","import styled, { css } from 'styled-components';\n\ninterface Props {\n  borderless?: boolean;\n}\n\nconst borderCss = css`\n  border-bottom: 1px solid rgba(0, 0, 0, 0.12);\n`;\n\nconst TabHeaderWrapper = styled.div<Props>`\n  display: flex;\n  overflow: hidden;\n  flex-shrink: 0;\n  font-size: 1rem;\n  color: ${(props) => props.theme.palette.text.primary};\n  white-space: nowrap;\n  align-items: stretch;\n  ${(props) => !props.borderless && borderCss}\n`;\n\nexport default TabHeaderWrapper;\n","import styled, { css } from 'styled-components';\nimport classNames from 'classnames';\n\nconst topCss = css`\n  top: 0;\n`;\n\ninterface Props {\n  top?: boolean;\n}\n\n/**\n * 选择指示器\n */\nconst InkBar = styled.div.attrs((props) => ({\n  className: classNames('sinoui-ink-bar', props.className),\n}))<Props>`\n  position: absolute;\n  bottom: 0;\n  ${(props) => props.top && topCss};\n  left: 0;\n  transition: ${(props) =>\n    props.theme.transitions.create(['transform', 'width'])};\n  height: 2px;\n  background-color: ${(props) => props.theme.palette.primary[500]};\n`;\n\nexport default InkBar;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { useRipple } from '@sinoui/ripple/build';\n\nconst TabHeaderScrollButtonWrapper = styled.div`\n  width: 40px;\n  overflow: hidden;\n  position: relative;\n  text-align: center;\n  font-size: 1.25rem;\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  color: ${(props) => props.theme.palette.text.primary};\n`;\n\n/**\n * 标签条上的滚动按钮\n */\nfunction TabHeaderScrollButton(\n  props: React.DetailedHTMLProps<\n    React.HTMLAttributes<HTMLDivElement>,\n    HTMLDivElement\n  > & { disabled?: boolean },\n) {\n  const { disabled, children, ...rest } = props;\n  const ref = useRipple<HTMLDivElement>(undefined, disabled);\n  return (\n    <TabHeaderScrollButtonWrapper\n      {...rest}\n      ref={ref}\n      className=\"sinoui-tab-header-scroll-button\"\n      aria-disabled={disabled}\n    >\n      {disabled ? null : children}\n    </TabHeaderScrollButtonWrapper>\n  );\n}\n\nexport default TabHeaderScrollButton;\n","import React from 'react';\n\nfunction NextIcon() {\n  return (\n    <svg\n      focusable=\"false\"\n      viewBox=\"0 0 24 24\"\n      aria-hidden=\"true\"\n      role=\"presentation\"\n      fill=\"currentColor\"\n      width=\"1em\"\n      height=\"1em\"\n    >\n      <path d=\"M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z\" />\n    </svg>\n  );\n}\n\nexport default NextIcon;\n","import React from 'react';\n\nfunction PrevIcon() {\n  return (\n    <svg\n      focusable=\"false\"\n      viewBox=\"0 0 24 24\"\n      aria-hidden=\"true\"\n      role=\"presentation\"\n      fill=\"currentColor\"\n      width=\"1em\"\n      height=\"1em\"\n    >\n      <path d=\"M15.41 16.09l-4.58-4.59 4.58-4.59L14 5.5l-6 6 6 6z\" />\n    </svg>\n  );\n}\n\nexport default PrevIcon;\n","import { useEffect } from 'react';\n\n/**\n * 在组件初次渲染时阻止 transition 动画\n */\nfunction usePreventTransitionWhenMount<T extends HTMLElement>(\n  elementRef: React.RefObject<T>,\n) {\n  useEffect(() => {\n    const element = elementRef.current;\n    if (element) {\n      const { transition } = element.style;\n      element.style.transition = 'none';\n      const rafId = requestAnimationFrame(() => {\n        element.style.transition = transition;\n      });\n\n      return () => cancelAnimationFrame(rafId);\n    }\n    return undefined;\n  }, [elementRef]);\n}\n\nexport default usePreventTransitionWhenMount;\n","import { useEffect } from 'react';\nimport usePreventTransitionWhenMount from '../../helpers/usePreventTransitionWhenMount';\n\n/**\n * 同步指示条位置的hook\n *\n * @param inkBarRef 指示条元素引用\n * @param tabListRef 标签列表元素引用\n * @param selectedIndex 当前选中的索引\n */\nfunction useInkbarPositionSync(\n  inkBarRef: React.RefObject<HTMLDivElement>,\n  tabListRef: React.RefObject<HTMLDivElement>,\n  selectedIndex: number,\n) {\n  usePreventTransitionWhenMount(inkBarRef);\n\n  useEffect(() => {\n    const inkBar = inkBarRef.current;\n    const tabList = tabListRef.current;\n    if (inkBar && tabList) {\n      const activeTab = tabList.querySelector('.sinoui-tab--active');\n      if (activeTab) {\n        const { width, left } = activeTab.getBoundingClientRect();\n        const { left: containerLeft } = tabList.getBoundingClientRect();\n        const { scrollLeft } = tabList;\n        inkBar.style.width = `${width}px`;\n        inkBar.style.transform = `translate3d(${left -\n          containerLeft +\n          scrollLeft}px, 0px, 0px)`;\n      }\n    }\n  }, [inkBarRef, tabListRef, selectedIndex]);\n}\n\nexport default useInkbarPositionSync;\n","import { useEffect, useCallback, useState } from 'react';\n\n/**\n * 使用滚动状态的hook\n * @param tabListRef 标签列表元素引用\n */\nfunction useScrollState(tabListRef: React.RefObject<HTMLDivElement>) {\n  const [showScrollButtons, setShowScrollButtons] = useState(false); // 是否显示滚动按钮\n  const [isPrevDisabled, setIsPrevDisabled] = useState(true); // 向前滚动按钮是否禁用\n  const [isNextDisabled, setIsNextDisabled] = useState(false); // 向后滚动按钮是否禁用\n\n  /**\n   * 更新滚动按钮的状态\n   */\n  const updateScrollButtonsState = useCallback(() => {\n    const tabList = tabListRef.current;\n\n    if (tabList) {\n      const { scrollWidth, clientWidth, scrollLeft } = tabList;\n      setShowScrollButtons(scrollWidth > clientWidth);\n      setIsPrevDisabled(scrollLeft < 1);\n      setIsNextDisabled(scrollWidth - clientWidth === scrollLeft);\n    }\n  }, [tabListRef]);\n\n  useEffect(updateScrollButtonsState, [updateScrollButtonsState]);\n\n  /**\n   * 向前（左）滚动\n   */\n  const prev = useCallback(() => {\n    const tabList = tabListRef.current;\n\n    if (tabList) {\n      tabList.scrollLeft -= 500;\n\n      updateScrollButtonsState();\n    }\n  }, [tabListRef, updateScrollButtonsState]);\n\n  /**\n   * 向后（右）滚动\n   */\n  const next = useCallback(() => {\n    const tabList = tabListRef.current;\n\n    if (tabList) {\n      tabList.scrollLeft += 500;\n\n      updateScrollButtonsState();\n    }\n  }, [tabListRef, updateScrollButtonsState]);\n\n  return {\n    showScrollButtons,\n    isPrevDisabled,\n    isNextDisabled,\n    prev,\n    next,\n  };\n}\n\nexport default useScrollState;\n","import styled from 'styled-components';\n\nconst TabHeaderExtraContent = styled.div`\n  line-height: 48px;\n`;\n\nexport default TabHeaderExtraContent;\n","import styled from 'styled-components';\n\nconst TabList = styled.div`\n  flex: 1;\n  position: relative;\n  transition: transform 0.5s cubic-bezier(0.35, 0, 0.25, 1);\n  display: flex;\n\n  /* 隐藏滚动条 */\n  &::-webkit-scrollbar {\n    display: none; /* chrome, safari, opera */\n  }\n  scrollbar-width: none; /* firefox */\n  -ms-overflow-style: none; /* IE 10+, edge */\n  overflow: -moz-scrollbars-none; /* old firefox */\n\n  overflow-x: scroll;\n`;\n\nexport default TabList;\n","import React, { useRef } from 'react';\nimport TabHeaderWrapper from './TabHeaderWrapper';\nimport InkBar from '../InkBar';\nimport TabHeaderScrollButton from './TabHeaderScrollButton';\nimport NextIcon from './NextIcon';\nimport PrevIcon from './PrevIcon';\nimport useInkbarPositionSync from './useInkbarPositionSync';\nimport useScrollState from './useScrollState';\nimport TabHeaderExtraContent from './TabHeaderExtraContent';\nimport TabList from './TabList';\n\ninterface Props {\n  children: React.ReactNode;\n  /**\n   * 在标签右侧添加附加内容。\n   */\n  extraContent?: React.ReactNode;\n  /**\n   * 设置不显示底部线条。默认为 `false`。\n   */\n  borderless?: boolean;\n  /**\n   * 设置当前选中的标签页。这是一个从 `0` 开始的索引，第一个标签页的索引为 `0`，第二个标签页的索引为 `1`，……\n   */\n  selectedIndex: number;\n}\n\nfunction InnerTabHeader({\n  children,\n  extraContent,\n  borderless,\n  selectedIndex,\n  ...rest\n}: Props) {\n  const tabListRef = useRef<HTMLDivElement>(null);\n  const inkBarRef = useRef<HTMLDivElement>(null);\n\n  useInkbarPositionSync(inkBarRef, tabListRef, selectedIndex);\n  const {\n    showScrollButtons,\n    isPrevDisabled,\n    isNextDisabled,\n    prev,\n    next,\n  } = useScrollState(tabListRef);\n\n  return (\n    <TabHeaderWrapper\n      className=\"sinoui-tab-header\"\n      role=\"tablist\"\n      borderless={borderless}\n      {...rest}\n    >\n      {showScrollButtons && (\n        <TabHeaderScrollButton disabled={isPrevDisabled} onClick={prev}>\n          <PrevIcon />\n        </TabHeaderScrollButton>\n      )}\n      <TabList className=\"sinoui-tab-list\" ref={tabListRef}>\n        {children}\n        <InkBar ref={inkBarRef} data-testid=\"inkbar\" />\n      </TabList>\n      {showScrollButtons && (\n        <TabHeaderScrollButton disabled={isNextDisabled} onClick={next}>\n          <NextIcon />\n        </TabHeaderScrollButton>\n      )}\n      {extraContent ? (\n        <TabHeaderExtraContent className=\"sinoui-tab-header__extra-content\">\n          {extraContent}\n        </TabHeaderExtraContent>\n      ) : null}\n    </TabHeaderWrapper>\n  );\n}\n\nexport default InnerTabHeader;\n","import React, { useMemo } from 'react';\nimport TabHeaderContext from '../TabHeaderContext';\nimport useRefValue from '../../helpers/useRefValue';\nimport InnerTabHeader from './InnerTabHeader';\nimport TabListContext from '../TabListContext';\nimport useTabList from '../commons/useTabList';\n\ninterface Props {\n  children?: React.ReactNode;\n  /**\n   * 指定在密集模式下使用。\n   */\n  dense?: boolean;\n  /**\n   * 设置当前选中的标签页。这是一个从 `0` 开始的索引，第一个标签页的索引为 `0`，第二个标签页的索引为 `1`，……\n   */\n  selectedIndex: number;\n  /**\n   * 每次标签页切换时调用的事件处理器。这个函数的 `index` 参数是新的选中标签页索引，`lastIndex` 参数是变更之前选中的标签页索引，`event` 参数是引起页签切换的事件，可能是 `keydown` 或者 `click` 事件。如果 `index` 和 `lastIndex` 相同时，表示用户在当前选中的标签页上点击。\n   */\n  onSelect?: (\n    index: number,\n    lastIndex: number,\n    event: React.MouseEvent | React.KeyboardEvent,\n  ) => boolean | undefined | void;\n  /**\n   * 在标签右侧添加附加内容。\n   */\n  extraContent?: React.ReactNode;\n  /**\n   * 设置不显示底部线条。默认为 `false`。\n   */\n  borderless?: boolean;\n\n  /**\n   * 设置自定义的 css 类名\n   */\n  className?: string;\n\n  /**\n   * 设置自定义的 css 样式\n   */\n  style?: React.CSSProperties;\n}\n\n/**\n * 选项卡头部组件\n *\n */\nfunction TabHeader({\n  children,\n  dense,\n  selectedIndex = 0,\n  onSelect,\n  extraContent,\n  borderless,\n  ...rest\n}: Props) {\n  const tabList = useTabList(selectedIndex);\n\n  const onSelectRef = useRefValue(onSelect);\n\n  const context = useMemo(\n    () => ({\n      dense,\n      onSelect: (\n        tabIndex: number,\n        event: React.MouseEvent | React.KeyboardEvent,\n      ) => {\n        if (onSelectRef.current) {\n          onSelectRef.current(tabIndex, selectedIndex, event);\n        }\n      },\n    }),\n    [dense, onSelectRef, selectedIndex],\n  );\n\n  return (\n    <TabListContext.Provider value={tabList}>\n      <TabHeaderContext.Provider value={context}>\n        <InnerTabHeader\n          extraContent={extraContent}\n          borderless={borderless}\n          selectedIndex={selectedIndex}\n          {...rest}\n        >\n          {children}\n        </InnerTabHeader>\n      </TabHeaderContext.Provider>\n    </TabListContext.Provider>\n  );\n}\n\nexport default TabHeader;\n","import TabHeader from './TabHeader';\n\nexport default TabHeader;\n","import { useRef } from 'react';\n\n/**\n * 使用同步的“变量”\n */\nfunction useRefValue<T>(value: T) {\n  const ref = useRef(value);\n\n  ref.current = value;\n\n  return ref;\n}\n\nexport default useRefValue;\n"],"sourceRoot":""}