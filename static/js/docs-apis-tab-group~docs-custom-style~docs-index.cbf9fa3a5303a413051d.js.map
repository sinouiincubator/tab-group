{"version":3,"sources":["D:/Users/jacki/Documents/GitHub/tab-group/src/components/TabContentContext.ts","D:/Users/jacki/Documents/GitHub/tab-group/src/components/TabGroup.tsx","D:/Users/jacki/Documents/GitHub/tab-group/src/components/TabHeaderContext.ts","D:/Users/jacki/Documents/GitHub/tab-group/src/components/TabListContext.ts","D:/Users/jacki/Documents/GitHub/tab-group/src/components/commons/useTabList.ts","D:/Users/jacki/Documents/GitHub/tab-group/src/components/tab-content/TabContentWrapper.tsx","D:/Users/jacki/Documents/GitHub/tab-group/src/components/tab-content/TabPanelListWrapper.tsx","D:/Users/jacki/Documents/GitHub/tab-group/src/components/tab-content/TabContent.tsx","D:/Users/jacki/Documents/GitHub/tab-group/src/components/tab-content/index.ts","D:/Users/jacki/Documents/GitHub/tab-group/src/components/tab-header/TabHeaderWrapper.tsx","D:/Users/jacki/Documents/GitHub/tab-group/src/components/InkBar.tsx","D:/Users/jacki/Documents/GitHub/tab-group/src/components/tab-header/TabHeaderScrollButton.tsx","D:/Users/jacki/Documents/GitHub/tab-group/src/components/tab-header/NextIcon.tsx","D:/Users/jacki/Documents/GitHub/tab-group/src/components/tab-header/PrevIcon.tsx","D:/Users/jacki/Documents/GitHub/tab-group/src/helpers/usePreventTransitionWhenMount.ts","D:/Users/jacki/Documents/GitHub/tab-group/src/components/tab-header/useInkbarPositionSync.ts","D:/Users/jacki/Documents/GitHub/tab-group/src/helpers/useEventCallback.ts","D:/Users/jacki/Documents/GitHub/tab-group/src/helpers/easeInOut.ts","D:/Users/jacki/Documents/GitHub/tab-group/src/helpers/animate.ts","D:/Users/jacki/Documents/GitHub/tab-group/src/components/tab-header/useScrollState.ts","D:/Users/jacki/Documents/GitHub/tab-group/src/components/tab-header/TabHeaderExtraContent.ts","D:/Users/jacki/Documents/GitHub/tab-group/src/components/tab-header/TabList.ts","D:/Users/jacki/Documents/GitHub/tab-group/src/components/tab-header/InnerTabHeader.tsx","D:/Users/jacki/Documents/GitHub/tab-group/src/components/tab-header/TabHeader.tsx","D:/Users/jacki/Documents/GitHub/tab-group/src/components/tab-header/index.ts","D:/Users/jacki/Documents/GitHub/tab-group/src/constants.ts","D:/Users/jacki/Documents/GitHub/tab-group/src/helpers/useRefValue.ts"],"names":["TabContentContext","React","createContext","InnerTabGroup","className","onSelect","selectedIndex","children","dense","forceRenderTabPanel","cacheable","animateHeight","tabHeaderExtraContent","borderless","simple","textColor","inkBarColor","fullWidth","animateTransitions","rest","classNames","extraContent","UnControlledTabGroup","defaultIndex","useState","setSelectedIndex","onSelectRef","useRefValue","handleTabSelect","useCallback","tabIndex","prevSelectedIndex","event","onSelectProps","current","TabGroup","useRef","undefined","TabHeaderContext","TabListContext","useTabList","renderCount","setRenderCount","isRenderredRef","tabsRef","sortedTabsRef","tabsPropsRef","useEffect","register","tabId","props","sortedTabs","currentIdx","indexOf","state","push","idx","length","unregister","tabs","tabIdx","splice","getTabs","getTabProps","useMemo","TabContentWrapper","styled","div","transitionCss","css","TabPanelListWrapper","TabContent","tabListContext","context","inTabContent","left","tabContentRef","prevSelectedIndexRef","tabContent","prev","querySelector","style","height","prevHeight","getBoundingClientRect","overflow","isEnd","reset","transition","rafId","requestAnimationFrame","timeoutId","setTimeout","cancelAnimationFrame","clearTimeout","useAnimateHeight","Provider","value","ref","borderCss","TabHeaderWrapper","topCss","InkBar","attrs","top","theme","transitions","create","getColorFromTheme","palette","primary","TabHeaderScrollButtonWrapper","text","breakpoint","disabled","TabHeaderScrollButton","useRipple","aria-disabled","NextIcon","focusable","viewBox","aria-hidden","role","fill","width","d","PrevIcon","usePreventTransitionWhenMount","elementRef","element","useInkbarPositionSync","inkBarRef","tabListRef","inkBar","tabList","activeTab","containerLeft","scrollLeft","transform","useEnhancedEffect","window","useLayoutEffect","useEventCallback","fn","easeInOut","elapsed","initialValue","amountOfChange","duration","easeInOutAnimate","start","end","update","animate","useScrollState","tabListContextState","showScrollButtons","setShowScrollButtons","isPrevDisabled","setIsPrevDisabled","isNextDisabled","setIsNextDisabled","scrollBy","delta","updateScrollButtonsState","scrollWidth","clientWidth","scrollSelectedTabIntoView","selectedTabId","selectedTab","document","tabListRect","tabRect","right","handleResize","debounce","DEBOUNCE_WAIT","addEventListener","cancel","removeEventListener","next","handleTabListScroll","onTabListScroll","TabHeaderExtraContent","fullWidthCss","TabList","InnerTabHeader","onClick","onScroll","data-testid","color","TabHeader","LEFT_KEY_CODE","TOP_KEY_CODE","RIGHT_KEY_CODE","BOTTOM_KEY_CODE"],"mappings":"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","file":"static/js/docs-apis-tab-group~docs-custom-style~docs-index.69fcbaa9.js","sourcesContent":["import React from 'react';\n\ninterface TabContentContextState {\n  inTabContent: boolean;\n  /**\n   * 是否立即渲染所有的标签面板到 DOM 中。\n   */\n  forceRenderTabPanel?: boolean;\n  /**\n   * 设置启动标签面板渲染到 DOM 的缓存特性。\n   */\n  cacheable?: boolean;\n  /**\n   * 变更当前选项卡\n   */\n  onSelect: (\n    tabIndex: number,\n    event: React.MouseEvent | React.KeyboardEvent,\n  ) => void;\n}\n\n/**\n * 标签页内容上下文\n */\nconst TabContentContext = React.createContext<TabContentContextState | null>(\n  null,\n);\n\nexport default TabContentContext;\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport React, { useRef, useState, useCallback } from 'react';\nimport classNames from 'classnames';\nimport useRefValue from '../helpers/useRefValue';\nimport { TabSelectCallback } from '../types';\nimport TabHeader from './tab-header';\nimport TabContent from './tab-content';\n\ninterface Props {\n  /**\n   * 允许改变在初始渲染时显示第几个标签页的属性。默认为 `0`。这是一个从 `0` 开始的索引，第一个标签页的索引为 `0`，第二个标签页的索引为 `1`，……\n   */\n  defaultIndex?: number;\n  /**\n   * 设置当前选中的标签页。这是一个从 `0` 开始的索引，第一个标签页的索引为 `0`，第二个标签页的索引为 `1`，……\n   *\n   * 默认值为 null。\n   */\n  selectedIndex?: number;\n  /**\n   * 每次标签页切换时调用的事件处理器。这个函数的 `index` 参数是新的选中标签页索引，`lastIndex` 参数是变更之前选中的标签页索引，`event` 参数是引起页签切换的事件，可能是 `keydown` 或者 `click` 事件。如果 `index` 和 `lastIndex` 相同时，表示用户在当前选中的标签页上点击。\n   */\n  onSelect?: (\n    index: number,\n    lastIndex: number,\n    event: React.MouseEvent | React.KeyboardEvent,\n  ) => boolean | undefined | void;\n  /**\n   * 设置标签。可以是多个 `<Tab />` 元素。\n   */\n  children?: React.ReactNode;\n  /**\n   * 给标签页组件根元素指定新的样式名\n   */\n  className?: string;\n  /**\n   * 设置标签页组件根元素的样式\n   */\n  style?: React.CSSProperties;\n  /**\n   * 设置标签页在密集模式下展现。\n   */\n  dense?: boolean;\n  /**\n   * 默认情况下只有当前标签面板会渲染到 DOM 中（出于性能考量）。如果设置为 `true`，则所有的标签面板从一开始就会立即渲染到 DOM 中。默认为 `false`。\n   */\n  forceRenderTabPanel?: boolean;\n\n  /**\n   * 设置启动标签面板渲染到 DOM 的缓存特性。当`forceRenderTabPanel` 为 `false` 此配置才有效。默认为 `true`。如果设置为 `false`，则不会缓存标签面板的渲染，标签切换后，销毁该标签面板的DOM。\n   */\n  cacheable?: boolean;\n\n  /**\n   * 设置启用标签面板切换时内容高度过渡动画。默认为 `false`，不启用。设置为 `true`，启用高度过渡动画，但是可能会影响性能。\n   */\n  animateHeight?: boolean;\n  /**\n   * 默认为 `true`。设置为 `false` 则会禁止内容切换时的过渡动画。\n   */\n  animateTransitions?: boolean;\n  /**\n   * 在标签右侧添加附加内容。\n   */\n  tabHeaderExtraContent?: React.ReactNode;\n\n  /**\n   * 设置不显示标签条底部线条。\n   */\n  borderless?: boolean;\n  /**\n   * simple模式，可以使用`TabGroup`+`TabHeader`+`TabContent`组合形式\n   */\n  simple?: boolean;\n  /**\n   * 标签文本颜色\n   */\n  textColor?: string;\n  /**\n   * 指示条颜色\n   */\n  inkBarColor?: string;\n\n  /**\n   * 全宽模式。页签条上的页签平分页签条的宽度。\n   */\n  fullWidth?: boolean;\n}\n\nfunction InnerTabGroup({\n  className,\n  onSelect,\n  selectedIndex = 0,\n  children,\n  dense,\n  forceRenderTabPanel,\n  cacheable,\n  animateHeight,\n  tabHeaderExtraContent,\n  borderless,\n  simple,\n  textColor,\n  inkBarColor,\n  fullWidth,\n  animateTransitions,\n  ...rest\n}: Props) {\n  return simple ? (\n    <div className={classNames('sinoui-tab-group', className)} {...rest}>\n      {children}\n    </div>\n  ) : (\n    <div className={classNames('sinoui-tab-group', className)} {...rest}>\n      <TabHeader\n        selectedIndex={selectedIndex}\n        dense={dense}\n        onSelect={onSelect}\n        extraContent={tabHeaderExtraContent}\n        borderless={borderless}\n        textColor={textColor}\n        inkBarColor={inkBarColor}\n        fullWidth={fullWidth}\n      >\n        {children}\n      </TabHeader>\n      <TabContent\n        selectedIndex={selectedIndex}\n        onSelect={onSelect}\n        forceRenderTabPanel={forceRenderTabPanel}\n        cacheable={cacheable}\n        animateHeight={animateHeight}\n        animateTransitions={animateTransitions}\n      >\n        {children}\n      </TabContent>\n    </div>\n  );\n}\n\n/**\n * 受控模式的标签页组件\n */\nfunction UnControlledTabGroup({ defaultIndex = 0, onSelect, ...rest }: Props) {\n  const [selectedIndex, setSelectedIndex] = useState(defaultIndex);\n  const onSelectRef = useRefValue(onSelect);\n\n  const handleTabSelect: TabSelectCallback = useCallback(\n    (tabIndex, prevSelectedIndex, event) => {\n      const onSelectProps = onSelectRef.current;\n      const preventTabChange =\n        !!onSelectProps &&\n        onSelectProps(tabIndex, prevSelectedIndex, event) === false;\n\n      if (preventTabChange) {\n        return;\n      }\n\n      setSelectedIndex(tabIndex);\n    },\n    [onSelectRef],\n  );\n  return (\n    <InnerTabGroup\n      {...rest}\n      onSelect={handleTabSelect}\n      selectedIndex={selectedIndex}\n    />\n  );\n}\n\n/**\n * 多标签页组件\n */\nfunction TabGroup({ selectedIndex, ...rest }: Props) {\n  const isUnControlled = useRef(selectedIndex === undefined);\n  return isUnControlled.current ? (\n    <UnControlledTabGroup {...rest} />\n  ) : (\n    <InnerTabGroup selectedIndex={selectedIndex} {...rest} />\n  );\n}\n\nexport default TabGroup;\n","import React from 'react';\n\ninterface TabHeaderContextState {\n  /**\n   * 是否是密集模式\n   */\n  dense?: boolean;\n\n  /**\n   * 变更当前选项卡\n   */\n  onSelect: (\n    tabIndex: number,\n    event: React.MouseEvent | React.KeyboardEvent,\n  ) => void;\n  /**\n   * 标签文本颜色\n   */\n  textColor?: string;\n}\n\n/**\n * 标签头部上下文\n */\nconst TabHeaderContext = React.createContext<TabHeaderContextState | null>(\n  null,\n);\n\nexport default TabHeaderContext;\n","import React from 'react';\n\nexport interface TabProps {\n  disabled?: boolean;\n}\n\nexport interface TabListContextState {\n  /**\n   * 注册标签页\n   */\n  register: (tabId: string, props: TabProps) => number;\n  /**\n   * 取消注册标签页\n   */\n  unregister: (tabId: string) => void;\n  /**\n   * 当前选中标签页的索引。索引从 0 开始。\n   */\n  selectedIndex: number;\n  /**\n   * 获取所有标签页的id\n   */\n  getTabs(): string[];\n  getTabProps(tabId: string): TabProps;\n}\n\n/**\n * 标签列表上下文\n */\nconst TabListContext = React.createContext<TabListContextState | null>(null);\n\nexport default TabListContext;\n","import { useEffect, useState, useRef, useCallback, useMemo } from 'react';\nimport { TabProps } from '../TabListContext';\n\n/**\n * 标签页列表状态管理\n */\nfunction useTabList(selectedIndex: number) {\n  const [renderCount, setRenderCount] = useState(1); // 内部 tab 发生变化引起重绘的次数\n  const isRenderredRef = useRef(false); // 是否已经同步渲染过\n  const tabsRef = useRef<string[]>([]); // 所有包含标签页（无序的）\n  const sortedTabsRef = useRef<string[]>([]); // 包含的有序的标签页\n  const tabsPropsRef = useRef<{ [name: string]: TabProps }>({});\n  sortedTabsRef.current = []; // TODO: current mode 可能会有缺陷，参见： https://github.com/facebook/react/issues/14099\n  isRenderredRef.current = false; // TODO: current mode 可能会有缺陷，参见： https://github.com/facebook/react/issues/14099\n\n  useEffect(() => {\n    isRenderredRef.current = true;\n  });\n\n  /**\n   * 注册标签页\n   */\n  const register = useCallback((tabId: string, props: TabProps) => {\n    const sortedTabs = sortedTabsRef.current;\n    const currentIdx = sortedTabs.indexOf(tabId);\n    if (isRenderredRef.current && currentIdx === -1) {\n      setRenderCount((state) => state + 1);\n      return -1;\n    }\n\n    const isAdded = tabsRef.current.indexOf(tabId) !== -1;\n\n    if (!isAdded) {\n      tabsRef.current.push(tabId);\n      tabsPropsRef.current[tabId] = props;\n    }\n\n    if (currentIdx !== -1) {\n      return currentIdx;\n    }\n\n    const idx = sortedTabs.length;\n    sortedTabs.push(tabId);\n\n    return idx;\n  }, []);\n\n  /**\n   * 取消注册标签页\n   */\n  const unregister = useCallback((tabId: string) => {\n    const sortedTabs = sortedTabsRef.current;\n    const tabs = tabsRef.current;\n    const idx = sortedTabs.indexOf(tabId);\n\n    const tabIdx = tabs.indexOf(tabId);\n    if (tabIdx !== -1) {\n      tabs.splice(tabIdx, 1);\n      delete tabsPropsRef.current[tabId];\n    }\n\n    if (idx !== -1) {\n      sortedTabs.splice(idx, 1);\n\n      setRenderCount((state) => state + 1);\n    }\n  }, []);\n\n  /**\n   * 获取所有标签id\n   */\n  const getTabs = useCallback(() => {\n    return sortedTabsRef.current;\n  }, []);\n\n  /**\n   * 获取指定id的属性\n   */\n  const getTabProps = useCallback((tabId: string) => {\n    return tabsPropsRef.current[tabId];\n  }, []);\n\n  return useMemo(\n    () => ({\n      register,\n      unregister,\n      selectedIndex,\n      renderCount,\n      getTabs,\n      getTabProps,\n    }),\n    [getTabProps, getTabs, register, renderCount, selectedIndex, unregister],\n  );\n}\n\nexport default useTabList;\n","import styled from 'styled-components';\n\nconst TabContentWrapper = styled.div`\n  overflow-x: hidden;\n\n  transition: height 0.5s cubic-bezier(0.15, 0.3, 0.25, 1) 0s;\n`;\n\nexport default TabContentWrapper;\n","import styled, { css } from 'styled-components';\n\nconst transitionCss = css`\n  transition: left 0.35s cubic-bezier(0.15, 0.3, 0.25, 1) 0s;\n`;\n\nconst TabPanelListWrapper = styled.div<{ animateTransitions: boolean }>`\n  display: flex;\n  align-items: flex-start;\n  position: relative;\n  ${(props) => props.animateTransitions && transitionCss}\n`;\n\nexport default TabPanelListWrapper;\n","import React, { useMemo, useRef, useEffect } from 'react';\nimport classNames from 'classnames';\nimport TabContentContext from '../TabContentContext';\nimport TabContentWrapper from './TabContentWrapper';\nimport TabPanelListWrapper from './TabPanelListWrapper';\nimport useTabList from '../commons/useTabList';\nimport TabListContext, { TabListContextState } from '../TabListContext';\nimport useRefValue from '../../helpers/useRefValue';\n\nexport interface Props {\n  children?: React.ReactNode;\n  /**\n   * 指定自定义样式名\n   */\n  className?: string;\n  /**\n   * 指定自定义样式\n   */\n  style?: React.CSSProperties;\n  /**\n   * 设置当前选中的标签页。这是一个从 `0` 开始的索引，第一个标签页的索引为 `0`，第二个标签页的索引为 `1`，……\n   */\n  selectedIndex: number;\n  /**\n   * 默认情况下只有当前标签面板会渲染到 DOM 中（出于性能考量）。如果设置为 `true`，则所有的标签面板从一开始就会立即渲染到 DOM 中。默认为 `false`。\n   */\n  forceRenderTabPanel?: boolean;\n  /**\n   * 设置启动标签面板渲染到 DOM 的缓存特性。当`forceRenderTabPanel` 为 `false` 此配置才有效。默认为 `true`。如果设置为 `false`，则不会缓存标签面板的渲染，标签切换后，销毁该标签面板的DOM。\n   */\n  cacheable?: boolean;\n  /**\n   * 设置启用标签面板切换时内容高度过渡动画。默认为 `false`，不启用。设置为 `true`，启用高度过渡动画，但是可能会影响性能。\n   */\n  animateHeight?: boolean;\n  /**\n   * 默认为 `true`。设置为 `false`，禁止内容切换时的过度动画。\n   */\n  animateTransitions?: boolean;\n  /**\n   * 每次标签页切换时调用的事件处理器。这个函数的 `index` 参数是新的选中标签页索引，`lastIndex` 参数是变更之前选中的标签页索引，`event` 参数是引起页签切换的事件，可能是 `keydown` 或者 `click` 事件。如果 `index` 和 `lastIndex` 相同时，表示用户在当前选中的标签页上点击。\n   */\n  onSelect?: (\n    index: number,\n    lastIndex: number,\n    event: React.MouseEvent | React.KeyboardEvent,\n  ) => boolean | undefined | void;\n}\n\n/**\n * 应用高度动画的hook。\n *\n * @param animateHeight 是否启用高度动画\n * @param selectedIndex 当前标签的索引位置\n * @param tabContentRef 标签内容容器DOM\n * @param tabListContext 标签列表上下文\n */\nfunction useAnimateHeight(\n  animateHeight: boolean,\n  selectedIndex: number,\n  tabContentRef: React.RefObject<HTMLDivElement>,\n  tabListContext: TabListContextState,\n) {\n  const prevSelectedIndexRef = useRef(selectedIndex);\n\n  useEffect(() => {\n    const prevSelectedIndex = prevSelectedIndexRef.current;\n    const tabContent = tabContentRef.current;\n    prevSelectedIndexRef.current = selectedIndex;\n\n    if (prevSelectedIndex === selectedIndex || !tabContent || !animateHeight) {\n      return undefined;\n    }\n\n    const tabs = tabListContext.getTabs();\n    const prev = tabContent.querySelector(\n      `#${tabs[prevSelectedIndex]}`,\n    ) as HTMLElement;\n    const current = tabContent.querySelector(\n      `#${tabs[selectedIndex]}`,\n    ) as HTMLElement;\n    prev.style.height = 'auto';\n    current.style.height = '';\n    const { height: prevHeight } = prev.getBoundingClientRect();\n    const { height } = current.getBoundingClientRect();\n\n    tabContent.style.height = `${prevHeight}px`;\n    tabContent.style.overflow = 'hidden';\n\n    let isEnd = false;\n    const reset = () => {\n      isEnd = true;\n      tabContent.style.transition = '';\n      tabContent.style.height = '';\n      tabContent.style.overflow = '';\n      prev.style.height = '';\n    };\n\n    const rafId = requestAnimationFrame(() => {\n      tabContent.style.height = `${height}px`;\n    });\n\n    const timeoutId = setTimeout(reset, 500);\n\n    return () => {\n      cancelAnimationFrame(rafId);\n      clearTimeout(timeoutId);\n      if (!isEnd) {\n        reset();\n      }\n    };\n  }, [animateHeight, selectedIndex, tabContentRef, tabListContext]);\n}\n\n/**\n * 选项卡组件的内容组件\n */\nexport default function TabContent(props: Props) {\n  const {\n    className,\n    selectedIndex,\n    children,\n    forceRenderTabPanel,\n    cacheable,\n    animateHeight = false,\n    animateTransitions = true,\n    onSelect,\n    ...rest\n  } = props;\n  const tabListContext = useTabList(selectedIndex);\n  const onSelectRef = useRefValue(onSelect);\n  const context = useMemo(\n    () => ({\n      inTabContent: true,\n      forceRenderTabPanel,\n      cacheable,\n      onSelect: (\n        tabIndex: number,\n        event: React.MouseEvent | React.KeyboardEvent,\n      ) => {\n        if (onSelectRef.current) {\n          onSelectRef.current(tabIndex, selectedIndex, event);\n        }\n      },\n    }),\n    [cacheable, forceRenderTabPanel, onSelectRef, selectedIndex],\n  );\n  const left = `-${100 * selectedIndex}%`;\n\n  const tabContentRef = useRef<HTMLDivElement>(null);\n  useAnimateHeight(animateHeight, selectedIndex, tabContentRef, tabListContext);\n\n  return (\n    <TabListContext.Provider value={tabListContext}>\n      <TabContentContext.Provider value={context}>\n        <TabContentWrapper\n          className={classNames('sinoui-tab-content', className)}\n          {...rest}\n          ref={tabContentRef}\n        >\n          <TabPanelListWrapper\n            style={{ left }}\n            className=\"sinoui-tab-panel-list\"\n            animateTransitions={animateTransitions}\n          >\n            {children}\n          </TabPanelListWrapper>\n        </TabContentWrapper>\n      </TabContentContext.Provider>\n    </TabListContext.Provider>\n  );\n}\n","import TabContent from './TabContent';\n\nexport default TabContent;\n","import styled, { css } from 'styled-components';\n\ninterface Props {\n  borderless?: boolean;\n}\n\nconst borderCss = css`\n  border-bottom: 1px solid rgba(0, 0, 0, 0.12);\n`;\n\nconst TabHeaderWrapper = styled.div<Props>`\n  display: flex;\n  overflow: hidden;\n  flex-shrink: 0;\n  font-size: 1rem;\n  white-space: nowrap;\n  align-items: stretch;\n  ${(props) => !props.borderless && borderCss}\n`;\n\nexport default TabHeaderWrapper;\n","import styled, { css } from 'styled-components';\nimport classNames from 'classnames';\nimport { getColorFromTheme } from 'sinoui-components/utils/colors';\n\nconst topCss = css`\n  top: 0;\n`;\n\ninterface Props {\n  top?: boolean;\n  color?: string;\n}\n\n/**\n * 选择指示器\n */\nconst InkBar = styled.div.attrs((props) => ({\n  className: classNames('sinoui-ink-bar', props.className),\n}))<Props>`\n  position: absolute;\n  bottom: 0;\n  ${(props) => props.top && topCss};\n  left: 0;\n  transition: ${(props) =>\n    props.theme.transitions.create(['transform', 'width'])};\n  height: 2px;\n  background-color: ${(props) =>\n    getColorFromTheme(props, props.theme.palette.primary[500])};\n`;\n\nexport default InkBar;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { useRipple } from '@sinoui/ripple';\nimport breakpoint from 'styled-components-breakpoint';\n\nconst TabHeaderScrollButtonWrapper = styled.div<any>`\n  width: 40px;\n  overflow: hidden;\n  position: relative;\n  text-align: center;\n  font-size: 1.25rem;\n  align-items: center;\n  justify-content: center;\n  color: ${(props) => props.theme.palette.text.primary};\n  cursor: pointer;\n\n  display: none;\n  ${breakpoint('sm')`\n    display: inline-flex;\n  `}\n\n  ${(props) => props.disabled && `cursor:default;`};\n`;\n\n/**\n * 标签条上的滚动按钮\n */\nfunction TabHeaderScrollButton(\n  props: React.DetailedHTMLProps<\n    React.HTMLAttributes<HTMLDivElement>,\n    HTMLDivElement\n  > & { disabled?: boolean },\n) {\n  const { disabled, children, ...rest } = props;\n  const ref = useRipple<HTMLDivElement>(undefined, disabled);\n  return (\n    <TabHeaderScrollButtonWrapper\n      {...rest}\n      ref={ref}\n      className=\"sinoui-tab-header-scroll-button\"\n      aria-disabled={disabled}\n      disabled={disabled}\n    >\n      {disabled ? null : children}\n    </TabHeaderScrollButtonWrapper>\n  );\n}\n\nexport default TabHeaderScrollButton;\n","import React from 'react';\n\nfunction NextIcon() {\n  return (\n    <svg\n      focusable=\"false\"\n      viewBox=\"0 0 24 24\"\n      aria-hidden=\"true\"\n      role=\"presentation\"\n      fill=\"currentColor\"\n      width=\"1em\"\n      height=\"1em\"\n    >\n      <path d=\"M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z\" />\n    </svg>\n  );\n}\n\nexport default NextIcon;\n","import React from 'react';\n\nfunction PrevIcon() {\n  return (\n    <svg\n      focusable=\"false\"\n      viewBox=\"0 0 24 24\"\n      aria-hidden=\"true\"\n      role=\"presentation\"\n      fill=\"currentColor\"\n      width=\"1em\"\n      height=\"1em\"\n    >\n      <path d=\"M15.41 16.09l-4.58-4.59 4.58-4.59L14 5.5l-6 6 6 6z\" />\n    </svg>\n  );\n}\n\nexport default PrevIcon;\n","import { useEffect } from 'react';\n\n/**\n * 在组件初次渲染时阻止 transition 动画\n */\nfunction usePreventTransitionWhenMount<T extends HTMLElement>(\n  elementRef: React.RefObject<T>,\n) {\n  useEffect(() => {\n    const element = elementRef.current;\n    if (element) {\n      const { transition } = element.style;\n      element.style.transition = 'none';\n      const rafId = requestAnimationFrame(() => {\n        element.style.transition = transition;\n      });\n\n      return () => cancelAnimationFrame(rafId);\n    }\n    return undefined;\n  }, [elementRef]);\n}\n\nexport default usePreventTransitionWhenMount;\n","import { useEffect } from 'react';\nimport usePreventTransitionWhenMount from '../../helpers/usePreventTransitionWhenMount';\n\n/**\n * 同步指示条位置的hook\n *\n * @param inkBarRef 指示条元素引用\n * @param tabListRef 标签列表元素引用\n * @param selectedIndex 当前选中的索引\n */\nfunction useInkbarPositionSync(\n  inkBarRef: React.RefObject<HTMLDivElement>,\n  tabListRef: React.RefObject<HTMLDivElement>,\n  selectedIndex: number,\n) {\n  usePreventTransitionWhenMount(inkBarRef);\n\n  useEffect(() => {\n    const inkBar = inkBarRef.current;\n    const tabList = tabListRef.current;\n    if (inkBar && tabList) {\n      const activeTab = tabList.querySelector('.sinoui-tab--active');\n      if (activeTab) {\n        const { width, left } = activeTab.getBoundingClientRect();\n        const { left: containerLeft } = tabList.getBoundingClientRect();\n        const { scrollLeft } = tabList;\n        inkBar.style.width = `${width}px`;\n        inkBar.style.transform = `translate3d(${left -\n          containerLeft +\n          scrollLeft}px, 0px, 0px)`;\n      }\n    }\n  }, [inkBarRef, tabListRef, selectedIndex]);\n}\n\nexport default useInkbarPositionSync;\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { useRef, useLayoutEffect, useCallback, useEffect } from 'react';\n\n// 兼容服务器渲染\nconst useEnhancedEffect =\n  typeof window !== 'undefined' ? useLayoutEffect : useEffect;\n\n/**\n * useCallback() 的替代品\n *\n * https://github.com/facebook/react/issues/14099#issuecomment-440013892\n *\n * @param fn 回调函数\n */\nfunction useEventCallback<T extends Function>(fn: T): T {\n  const ref = useRef<T>(fn);\n\n  useEnhancedEffect(() => {\n    ref.current = fn;\n  });\n\n  return useCallback(() => ref.current(), []) as any;\n}\n\nexport default useEventCallback;\n","/* eslint-disable no-return-assign */\n/* eslint-disable no-param-reassign */\n/* eslint-disable no-cond-assign */\n\n/**\n * 加速进入减速退出的 js 缓动函数实现\n *\n * 摘自 [js-easing-functions](https://github.com/bameyrick/js-easing-functions)\n *\n * @param elapsed 当前时间\n * @param initialValue 初始值\n * @param amountOfChange 值变化的量\n * @param duration 时长\n */\nfunction easeInOut(\n  elapsed: number,\n  initialValue: number,\n  amountOfChange: number,\n  duration: number,\n): number {\n  if ((elapsed /= duration / 2) < 1) {\n    return (amountOfChange / 2) * elapsed * elapsed * elapsed + initialValue;\n  }\n  return (\n    (amountOfChange / 2) * ((elapsed -= 2) * elapsed * elapsed + 2) +\n    initialValue\n  );\n}\n\nexport default easeInOut;\n","import { animate } from '@sinoui/utils';\nimport easeInOut from './easeInOut';\n\nconst easeInOutAnimate = (\n  start: number,\n  end: number,\n  duration: number,\n  update: (value: number) => void,\n) => animate(start, end, duration, update, easeInOut);\n\nexport default easeInOutAnimate;\n","import { useEffect, useCallback, useState, useMemo } from 'react';\nimport { debounce } from '@sinoui/utils';\nimport { DEBOUNCE_WAIT } from '../../constants';\nimport { TabListContextState } from '../TabListContext';\nimport useEventCallback from '../../helpers/useEventCallback';\nimport animate from '../../helpers/animate';\n\n/**\n * 使用滚动状态的hook\n * @param tabListRef 标签列表元素引用\n */\nfunction useScrollState(\n  tabListRef: React.RefObject<HTMLDivElement>,\n  tabListContextState: TabListContextState,\n) {\n  const [showScrollButtons, setShowScrollButtons] = useState(false); // 是否显示滚动按钮\n  const [isPrevDisabled, setIsPrevDisabled] = useState(true); // 向前滚动按钮是否禁用\n  const [isNextDisabled, setIsNextDisabled] = useState(false); // 向后滚动按钮是否禁用\n\n  /**\n   * 滚动指定距离\n   */\n  const scrollBy = useCallback(\n    (delta: number) => {\n      const tabList = tabListRef.current;\n\n      if (tabList) {\n        const { scrollLeft } = tabList;\n        const newScrollLeft = scrollLeft + delta;\n        animate(scrollLeft, newScrollLeft, 300, (value) => {\n          tabList.scrollLeft = value;\n        });\n      }\n    },\n    [tabListRef],\n  );\n\n  /**\n   * 更新滚动按钮的状态\n   */\n  const updateScrollButtonsState = useCallback(() => {\n    const tabList = tabListRef.current;\n\n    if (tabList) {\n      const { scrollWidth, clientWidth, scrollLeft } = tabList;\n      setShowScrollButtons(scrollWidth > clientWidth);\n      setIsPrevDisabled(scrollLeft < 1);\n      setIsNextDisabled(scrollWidth - clientWidth === scrollLeft);\n    }\n  }, [tabListRef]);\n\n  /**\n   * 滚动标签条以使选中的标签出现在视口中\n   */\n  const scrollSelectedTabIntoView = useEventCallback(() => {\n    const selectedTabId = tabListContextState.getTabs()[\n      tabListContextState.selectedIndex\n    ];\n    const selectedTab = document.querySelector(`#${selectedTabId}`);\n    const tabList = tabListRef.current;\n\n    if (selectedTab && tabList) {\n      const tabListRect = tabList.getBoundingClientRect();\n      const tabRect = selectedTab.getBoundingClientRect();\n\n      if (tabRect.left < tabListRect.left) {\n        scrollBy(tabRect.left - tabListRect.left);\n      } else if (tabRect.right > tabListRect.right) {\n        scrollBy(tabRect.right - tabListRect.right);\n      }\n    }\n  });\n\n  useEffect(() => {\n    updateScrollButtonsState();\n  }, [updateScrollButtonsState]);\n\n  useEffect(() => {\n    scrollSelectedTabIntoView();\n  }, [\n    scrollSelectedTabIntoView,\n    showScrollButtons,\n    tabListContextState.selectedIndex,\n  ]);\n\n  useEffect(() => {\n    const handleResize = debounce(() => {\n      updateScrollButtonsState();\n      scrollSelectedTabIntoView();\n    }, DEBOUNCE_WAIT);\n\n    window.addEventListener('resize', handleResize, false);\n\n    return () => {\n      handleResize.cancel();\n      window.removeEventListener('resize', handleResize, false);\n    };\n  }, [scrollSelectedTabIntoView, updateScrollButtonsState]);\n\n  /**\n   * 向前（左）滚动\n   */\n  const prev = useCallback(() => {\n    const tabList = tabListRef.current;\n\n    if (tabList) {\n      const { clientWidth } = tabList;\n      scrollBy(-clientWidth);\n    }\n  }, [scrollBy, tabListRef]);\n\n  /**\n   * 向后（右）滚动\n   */\n  const next = useCallback(() => {\n    const tabList = tabListRef.current;\n\n    if (tabList) {\n      const { clientWidth } = tabList;\n      scrollBy(clientWidth);\n    }\n  }, [scrollBy, tabListRef]);\n\n  // 处理标签列表的滚动事件\n  const handleTabListScroll = useMemo(\n    () => debounce(updateScrollButtonsState, DEBOUNCE_WAIT),\n    [updateScrollButtonsState],\n  );\n\n  useEffect(() => {\n    return () => handleTabListScroll.cancel();\n  }, [handleTabListScroll]);\n\n  return {\n    showScrollButtons,\n    isPrevDisabled,\n    isNextDisabled,\n    prev,\n    next,\n    onTabListScroll: handleTabListScroll,\n  };\n}\n\nexport default useScrollState;\n","import styled from 'styled-components';\n\nconst TabHeaderExtraContent = styled.div`\n  line-height: 48px;\n`;\n\nexport default TabHeaderExtraContent;\n","import styled, { css } from 'styled-components';\n\ninterface Props {\n  /**\n   * 全宽模式\n   */\n  fullWidth?: boolean;\n}\n\nconst fullWidthCss = css`\n  && {\n    overflow: hidden;\n\n    & > .sinoui-tab {\n      flex: 1;\n      padding: 10px 8px;\n      overflow: hidden;\n      display: inline-block;\n      text-overflow: ellipsis;\n      white-space: nowrap;\n    }\n  }\n`;\n\nconst TabList = styled.div<Props>`\n  flex: 1;\n  position: relative;\n  transition: transform 0.5s cubic-bezier(0.35, 0, 0.25, 1);\n  display: flex;\n\n  /* 隐藏滚动条 */\n  &::-webkit-scrollbar {\n    display: none; /* chrome, safari, opera */\n  }\n  scrollbar-width: none; /* firefox */\n  -ms-overflow-style: none; /* IE 10+, edge */\n  overflow: -moz-scrollbars-none; /* old firefox */\n\n  overflow-x: scroll;\n\n  ${(props) => props.fullWidth && fullWidthCss};\n`;\n\nexport default TabList;\n","import React, { useRef } from 'react';\nimport TabHeaderWrapper from './TabHeaderWrapper';\nimport InkBar from '../InkBar';\nimport TabHeaderScrollButton from './TabHeaderScrollButton';\nimport NextIcon from './NextIcon';\nimport PrevIcon from './PrevIcon';\nimport useInkbarPositionSync from './useInkbarPositionSync';\nimport useScrollState from './useScrollState';\nimport TabHeaderExtraContent from './TabHeaderExtraContent';\nimport TabList from './TabList';\nimport { TabListContextState } from '../TabListContext';\n\ninterface Props {\n  children: React.ReactNode;\n  /**\n   * 在标签右侧添加附加内容。\n   */\n  extraContent?: React.ReactNode;\n  /**\n   * 设置不显示底部线条。默认为 `false`。\n   */\n  borderless?: boolean;\n  /**\n   * 标签列表上下文状态\n   */\n  tabListContextState: TabListContextState;\n  /**\n   * 指示条颜色\n   */\n  inkBarColor?: string;\n\n  /**\n   * 全宽模式\n   */\n  fullWidth?: boolean;\n}\n\nfunction InnerTabHeader({\n  children,\n  extraContent,\n  borderless,\n  tabListContextState,\n  inkBarColor,\n  fullWidth,\n  ...rest\n}: Props) {\n  const tabListRef = useRef<HTMLDivElement>(null);\n  const inkBarRef = useRef<HTMLDivElement>(null);\n\n  useInkbarPositionSync(\n    inkBarRef,\n    tabListRef,\n    tabListContextState.selectedIndex,\n  );\n  const {\n    showScrollButtons,\n    isPrevDisabled,\n    isNextDisabled,\n    prev,\n    next,\n    onTabListScroll,\n  } = useScrollState(tabListRef, tabListContextState);\n\n  return (\n    <TabHeaderWrapper\n      className=\"sinoui-tab-header\"\n      role=\"tablist\"\n      borderless={borderless}\n      {...rest}\n    >\n      {showScrollButtons && (\n        <TabHeaderScrollButton disabled={isPrevDisabled} onClick={prev}>\n          <PrevIcon />\n        </TabHeaderScrollButton>\n      )}\n      <TabList\n        className=\"sinoui-tab-list\"\n        ref={tabListRef}\n        onScroll={onTabListScroll}\n        fullWidth={fullWidth}\n      >\n        {children}\n        <InkBar ref={inkBarRef} data-testid=\"inkbar\" color={inkBarColor} />\n      </TabList>\n      {showScrollButtons && (\n        <TabHeaderScrollButton disabled={isNextDisabled} onClick={next}>\n          <NextIcon />\n        </TabHeaderScrollButton>\n      )}\n      {extraContent ? (\n        <TabHeaderExtraContent className=\"sinoui-tab-header__extra-content\">\n          {extraContent}\n        </TabHeaderExtraContent>\n      ) : null}\n    </TabHeaderWrapper>\n  );\n}\n\nexport default InnerTabHeader;\n","import React, { useMemo } from 'react';\nimport TabHeaderContext from '../TabHeaderContext';\nimport useRefValue from '../../helpers/useRefValue';\nimport InnerTabHeader from './InnerTabHeader';\nimport TabListContext from '../TabListContext';\nimport useTabList from '../commons/useTabList';\n\ninterface Props {\n  children?: React.ReactNode;\n  /**\n   * 指定在密集模式下使用。\n   */\n  dense?: boolean;\n  /**\n   * 设置当前选中的标签页。这是一个从 `0` 开始的索引，第一个标签页的索引为 `0`，第二个标签页的索引为 `1`，……\n   */\n  selectedIndex: number;\n  /**\n   * 每次标签页切换时调用的事件处理器。这个函数的 `index` 参数是新的选中标签页索引，`lastIndex` 参数是变更之前选中的标签页索引，`event` 参数是引起页签切换的事件，可能是 `keydown` 或者 `click` 事件。如果 `index` 和 `lastIndex` 相同时，表示用户在当前选中的标签页上点击。\n   */\n  onSelect?: (\n    index: number,\n    lastIndex: number,\n    event: React.MouseEvent | React.KeyboardEvent,\n  ) => boolean | undefined | void;\n  /**\n   * 在标签右侧添加附加内容。\n   */\n  extraContent?: React.ReactNode;\n  /**\n   * 设置不显示底部线条。默认为 `false`。\n   */\n  borderless?: boolean;\n\n  /**\n   * 设置自定义的 css 类名\n   */\n  className?: string;\n\n  /**\n   * 设置自定义的 css 样式\n   */\n  style?: React.CSSProperties;\n  /**\n   * 标签文本颜色\n   */\n  textColor?: string;\n  /**\n   * 指示条颜色\n   */\n  inkBarColor?: string;\n\n  /**\n   * 全宽模式\n   */\n  fullWidth?: boolean;\n}\n\n/**\n * 选项卡头部组件\n *\n */\nfunction TabHeader({\n  children,\n  dense,\n  selectedIndex = 0,\n  onSelect,\n  extraContent,\n  borderless,\n  textColor,\n  inkBarColor,\n  ...rest\n}: Props) {\n  const tabList = useTabList(selectedIndex);\n\n  const onSelectRef = useRefValue(onSelect);\n\n  const context = useMemo(\n    () => ({\n      dense,\n      onSelect: (\n        tabIndex: number,\n        event: React.MouseEvent | React.KeyboardEvent,\n      ) => {\n        if (onSelectRef.current) {\n          onSelectRef.current(tabIndex, selectedIndex, event);\n        }\n      },\n      textColor,\n    }),\n    [dense, onSelectRef, selectedIndex, textColor],\n  );\n\n  return (\n    <TabListContext.Provider value={tabList}>\n      <TabHeaderContext.Provider value={context}>\n        <InnerTabHeader\n          extraContent={extraContent}\n          borderless={borderless}\n          tabListContextState={tabList}\n          inkBarColor={inkBarColor}\n          {...rest}\n        >\n          {children}\n        </InnerTabHeader>\n      </TabHeaderContext.Provider>\n    </TabListContext.Provider>\n  );\n}\n\nexport default TabHeader;\n","import TabHeader from './TabHeader';\n\nexport default TabHeader;\n","export const LEFT_KEY_CODE = 37; // 方向键左\n\nexport const TOP_KEY_CODE = 38; // 方向键上\n\nexport const RIGHT_KEY_CODE = 39; // 方向键右\n\nexport const BOTTOM_KEY_CODE = 40; // 方向键下\n\n/**\n * 防抖函数的延时时长\n */\nexport const DEBOUNCE_WAIT = 166; // 10 帧，166 毫秒\n","import { useRef } from 'react';\n\n/**\n * 使用同步的“变量”\n */\nfunction useRefValue<T>(value: T) {\n  const ref = useRef(value);\n\n  ref.current = value;\n\n  return ref;\n}\n\nexport default useRefValue;\n"],"sourceRoot":""}