{"version":3,"sources":["/Users/sinosoft/Documents/GitHub/tab-group/docs/apis/TabHeader.mdx","/Users/sinosoft/Documents/GitHub/tab-group/src/components/TabHeaderContext.ts","/Users/sinosoft/Documents/GitHub/tab-group/src/components/TabListContext.ts","/Users/sinosoft/Documents/GitHub/tab-group/src/components/commons/useTabList.ts","/Users/sinosoft/Documents/GitHub/tab-group/src/components/tab-header/TabHeaderWrapper.tsx","/Users/sinosoft/Documents/GitHub/tab-group/src/components/InkBar.tsx","/Users/sinosoft/Documents/GitHub/tab-group/src/components/tab-header/TabHeaderScrollButton.tsx","/Users/sinosoft/Documents/GitHub/tab-group/src/components/tab-header/NextIcon.tsx","/Users/sinosoft/Documents/GitHub/tab-group/src/components/tab-header/PrevIcon.tsx","/Users/sinosoft/Documents/GitHub/tab-group/src/helpers/usePreventTransitionWhenMount.ts","/Users/sinosoft/Documents/GitHub/tab-group/src/components/tab-header/useInkbarPositionSync.ts","/Users/sinosoft/Documents/GitHub/tab-group/src/helpers/useEventCallback.ts","/Users/sinosoft/Documents/GitHub/tab-group/src/helpers/easeInOut.ts","/Users/sinosoft/Documents/GitHub/tab-group/src/helpers/animate.ts","/Users/sinosoft/Documents/GitHub/tab-group/src/components/tab-header/useScrollState.ts","/Users/sinosoft/Documents/GitHub/tab-group/src/components/tab-header/TabHeaderExtraContent.ts","/Users/sinosoft/Documents/GitHub/tab-group/src/components/tab-header/TabList.ts","/Users/sinosoft/Documents/GitHub/tab-group/src/components/tab-header/InnerTabHeader.tsx","/Users/sinosoft/Documents/GitHub/tab-group/src/components/tab-header/TabHeader.tsx","/Users/sinosoft/Documents/GitHub/tab-group/src/constants.ts","/Users/sinosoft/Documents/GitHub/tab-group/src/helpers/useRefValue.ts"],"names":["layoutProps","MDXLayout","MDXContent","components","props","mdxType","of","TabHeader","isMDXComponent","TabHeaderContext","React","createContext","TabListContext","useTabList","selectedIndex","useState","renderCount","setRenderCount","isRenderredRef","useRef","tabsRef","sortedTabsRef","tabsPropsRef","current","useEffect","register","useCallback","tabId","sortedTabs","currentIdx","indexOf","state","push","idx","length","unregister","tabs","tabIdx","splice","getTabs","getTabProps","useMemo","borderCss","css","TabHeaderWrapper","styled","div","theme","palette","text","primary","borderless","topCss","InkBar","attrs","className","classNames","top","transitions","create","TabHeaderScrollButtonWrapper","TabHeaderScrollButton","disabled","children","rest","ref","useRipple","undefined","aria-disabled","NextIcon","focusable","viewBox","aria-hidden","role","fill","width","height","d","PrevIcon","usePreventTransitionWhenMount","elementRef","element","transition","style","rafId","requestAnimationFrame","cancelAnimationFrame","useInkbarPositionSync","inkBarRef","tabListRef","inkBar","tabList","activeTab","querySelector","getBoundingClientRect","left","containerLeft","scrollLeft","transform","useEnhancedEffect","window","useLayoutEffect","useEventCallback","fn","easeInOut","elapsed","initialValue","amountOfChange","duration","animate","start","end","callback","startTime","Date","now","delta","tick","value","useScrollState","tabListContextState","showScrollButtons","setShowScrollButtons","isPrevDisabled","setIsPrevDisabled","isNextDisabled","setIsNextDisabled","scrollBy","updateScrollButtonsState","scrollWidth","clientWidth","scrollSelectedTabIntoView","selectedTabId","selectedTab","document","tabListRect","tabRect","right","handleResize","debounce","DEBOUNCE_WAIT","addEventListener","cancel","removeEventListener","prev","next","handleTabListScroll","onTabListScroll","TabHeaderExtraContent","TabList","InnerTabHeader","extraContent","onClick","onScroll","data-testid","dense","onSelect","onSelectRef","useRefValue","context","tabIndex","event","Provider","LEFT_KEY_CODE","TOP_KEY_CODE","RIGHT_KEY_CODE","BOTTOM_KEY_CODE"],"mappings":"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","file":"static/js/docs-apis-tab-header.85bf72ef.js","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport { Playground, Props } from 'docz';\nimport TabHeader from '../../src/components/tab-header/TabHeader';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"tabheader\"\n    }}>{`TabHeader`}</h1>\n    <Props of={TabHeader} mdxType=\"Props\" />\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","import React from 'react';\n\ninterface TabHeaderContextState {\n  /**\n   * 是否是密集模式\n   */\n  dense?: boolean;\n\n  /**\n   * 变更当前选项卡\n   */\n  onSelect: (\n    tabIndex: number,\n    event: React.MouseEvent | React.KeyboardEvent,\n  ) => void;\n}\n\n/**\n * 标签头部上下文\n */\nconst TabHeaderContext = React.createContext<TabHeaderContextState | null>(\n  null,\n);\n\nexport default TabHeaderContext;\n","import React from 'react';\n\nexport interface TabProps {\n  disabled?: boolean;\n}\n\nexport interface TabListContextState {\n  /**\n   * 注册标签页\n   */\n  register: (tabId: string, props: TabProps) => number;\n  /**\n   * 取消注册标签页\n   */\n  unregister: (tabId: string) => void;\n  /**\n   * 当前选中标签页的索引。索引从 0 开始。\n   */\n  selectedIndex: number;\n  /**\n   * 获取所有标签页的id\n   */\n  getTabs(): string[];\n  getTabProps(tabId: string): TabProps;\n}\n\n/**\n * 标签列表上下文\n */\nconst TabListContext = React.createContext<TabListContextState | null>(null);\n\nexport default TabListContext;\n","import { useEffect, useState, useRef, useCallback, useMemo } from 'react';\nimport { TabProps } from '../TabListContext';\n\n/**\n * 标签页列表状态管理\n */\nfunction useTabList(selectedIndex: number) {\n  const [renderCount, setRenderCount] = useState(1); // 内部 tab 发生变化引起重绘的次数\n  const isRenderredRef = useRef(false); // 是否已经同步渲染过\n  const tabsRef = useRef<string[]>([]); // 所有包含标签页（无序的）\n  const sortedTabsRef = useRef<string[]>([]); // 包含的有序的标签页\n  const tabsPropsRef = useRef<{ [name: string]: TabProps }>({});\n  sortedTabsRef.current = []; // TODO: current mode 可能会有缺陷，参见： https://github.com/facebook/react/issues/14099\n  isRenderredRef.current = false; // TODO: current mode 可能会有缺陷，参见： https://github.com/facebook/react/issues/14099\n\n  useEffect(() => {\n    isRenderredRef.current = true;\n  });\n\n  /**\n   * 注册标签页\n   */\n  const register = useCallback((tabId: string, props: TabProps) => {\n    const sortedTabs = sortedTabsRef.current;\n    const currentIdx = sortedTabs.indexOf(tabId);\n    if (isRenderredRef.current && currentIdx === -1) {\n      setRenderCount((state) => state + 1);\n      return -1;\n    }\n\n    const isAdded = tabsRef.current.indexOf(tabId) !== -1;\n\n    if (!isAdded) {\n      tabsRef.current.push(tabId);\n      tabsPropsRef.current[tabId] = props;\n    }\n\n    if (currentIdx !== -1) {\n      return currentIdx;\n    }\n\n    const idx = sortedTabs.length;\n    sortedTabs.push(tabId);\n\n    return idx;\n  }, []);\n\n  /**\n   * 取消注册标签页\n   */\n  const unregister = useCallback((tabId: string) => {\n    const sortedTabs = sortedTabsRef.current;\n    const tabs = tabsRef.current;\n    const idx = sortedTabs.indexOf(tabId);\n\n    const tabIdx = tabs.indexOf(tabId);\n    if (tabIdx !== -1) {\n      tabs.splice(tabIdx, 1);\n      delete tabsPropsRef.current[tabId];\n    }\n\n    if (idx !== -1) {\n      sortedTabs.splice(idx, 1);\n\n      setRenderCount((state) => state + 1);\n    }\n  }, []);\n\n  /**\n   * 获取所有标签id\n   */\n  const getTabs = useCallback(() => {\n    return sortedTabsRef.current;\n  }, []);\n\n  /**\n   * 获取指定id的属性\n   */\n  const getTabProps = useCallback((tabId: string) => {\n    return tabsPropsRef.current[tabId];\n  }, []);\n\n  return useMemo(\n    () => ({\n      register,\n      unregister,\n      selectedIndex,\n      renderCount,\n      getTabs,\n      getTabProps,\n    }),\n    [getTabProps, getTabs, register, renderCount, selectedIndex, unregister],\n  );\n}\n\nexport default useTabList;\n","import styled, { css } from 'styled-components';\n\ninterface Props {\n  borderless?: boolean;\n}\n\nconst borderCss = css`\n  border-bottom: 1px solid rgba(0, 0, 0, 0.12);\n`;\n\nconst TabHeaderWrapper = styled.div<Props>`\n  display: flex;\n  overflow: hidden;\n  flex-shrink: 0;\n  font-size: 1rem;\n  color: ${(props) => props.theme.palette.text.primary};\n  white-space: nowrap;\n  align-items: stretch;\n  ${(props) => !props.borderless && borderCss}\n`;\n\nexport default TabHeaderWrapper;\n","import styled, { css } from 'styled-components';\nimport classNames from 'classnames';\n\nconst topCss = css`\n  top: 0;\n`;\n\ninterface Props {\n  top?: boolean;\n}\n\n/**\n * 选择指示器\n */\nconst InkBar = styled.div.attrs((props) => ({\n  className: classNames('sinoui-ink-bar', props.className),\n}))<Props>`\n  position: absolute;\n  bottom: 0;\n  ${(props) => props.top && topCss};\n  left: 0;\n  transition: ${(props) =>\n    props.theme.transitions.create(['transform', 'width'])};\n  height: 2px;\n  background-color: ${(props) => props.theme.palette.primary[500]};\n`;\n\nexport default InkBar;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { useRipple } from '@sinoui/ripple/build';\n\nconst TabHeaderScrollButtonWrapper = styled.div`\n  width: 40px;\n  overflow: hidden;\n  position: relative;\n  text-align: center;\n  font-size: 1.25rem;\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  color: ${(props) => props.theme.palette.text.primary};\n\n  @media (max-width: 600px) {\n    display: none;\n  }\n`;\n\n/**\n * 标签条上的滚动按钮\n */\nfunction TabHeaderScrollButton(\n  props: React.DetailedHTMLProps<\n    React.HTMLAttributes<HTMLDivElement>,\n    HTMLDivElement\n  > & { disabled?: boolean },\n) {\n  const { disabled, children, ...rest } = props;\n  const ref = useRipple<HTMLDivElement>(undefined, disabled);\n  return (\n    <TabHeaderScrollButtonWrapper\n      {...rest}\n      ref={ref}\n      className=\"sinoui-tab-header-scroll-button\"\n      aria-disabled={disabled}\n    >\n      {disabled ? null : children}\n    </TabHeaderScrollButtonWrapper>\n  );\n}\n\nexport default TabHeaderScrollButton;\n","import React from 'react';\n\nfunction NextIcon() {\n  return (\n    <svg\n      focusable=\"false\"\n      viewBox=\"0 0 24 24\"\n      aria-hidden=\"true\"\n      role=\"presentation\"\n      fill=\"currentColor\"\n      width=\"1em\"\n      height=\"1em\"\n    >\n      <path d=\"M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z\" />\n    </svg>\n  );\n}\n\nexport default NextIcon;\n","import React from 'react';\n\nfunction PrevIcon() {\n  return (\n    <svg\n      focusable=\"false\"\n      viewBox=\"0 0 24 24\"\n      aria-hidden=\"true\"\n      role=\"presentation\"\n      fill=\"currentColor\"\n      width=\"1em\"\n      height=\"1em\"\n    >\n      <path d=\"M15.41 16.09l-4.58-4.59 4.58-4.59L14 5.5l-6 6 6 6z\" />\n    </svg>\n  );\n}\n\nexport default PrevIcon;\n","import { useEffect } from 'react';\n\n/**\n * 在组件初次渲染时阻止 transition 动画\n */\nfunction usePreventTransitionWhenMount<T extends HTMLElement>(\n  elementRef: React.RefObject<T>,\n) {\n  useEffect(() => {\n    const element = elementRef.current;\n    if (element) {\n      const { transition } = element.style;\n      element.style.transition = 'none';\n      const rafId = requestAnimationFrame(() => {\n        element.style.transition = transition;\n      });\n\n      return () => cancelAnimationFrame(rafId);\n    }\n    return undefined;\n  }, [elementRef]);\n}\n\nexport default usePreventTransitionWhenMount;\n","import { useEffect } from 'react';\nimport usePreventTransitionWhenMount from '../../helpers/usePreventTransitionWhenMount';\n\n/**\n * 同步指示条位置的hook\n *\n * @param inkBarRef 指示条元素引用\n * @param tabListRef 标签列表元素引用\n * @param selectedIndex 当前选中的索引\n */\nfunction useInkbarPositionSync(\n  inkBarRef: React.RefObject<HTMLDivElement>,\n  tabListRef: React.RefObject<HTMLDivElement>,\n  selectedIndex: number,\n) {\n  usePreventTransitionWhenMount(inkBarRef);\n\n  useEffect(() => {\n    const inkBar = inkBarRef.current;\n    const tabList = tabListRef.current;\n    if (inkBar && tabList) {\n      const activeTab = tabList.querySelector('.sinoui-tab--active');\n      if (activeTab) {\n        const { width, left } = activeTab.getBoundingClientRect();\n        const { left: containerLeft } = tabList.getBoundingClientRect();\n        const { scrollLeft } = tabList;\n        inkBar.style.width = `${width}px`;\n        inkBar.style.transform = `translate3d(${left -\n          containerLeft +\n          scrollLeft}px, 0px, 0px)`;\n      }\n    }\n  }, [inkBarRef, tabListRef, selectedIndex]);\n}\n\nexport default useInkbarPositionSync;\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { useRef, useLayoutEffect, useCallback, useEffect } from 'react';\n\n// 兼容服务器渲染\nconst useEnhancedEffect =\n  typeof window !== 'undefined' ? useLayoutEffect : useEffect;\n\n/**\n * useCallback() 的替代品\n *\n * https://github.com/facebook/react/issues/14099#issuecomment-440013892\n *\n * @param fn 回调函数\n */\nfunction useEventCallback<T extends Function>(fn: T): T {\n  const ref = useRef<T>(fn);\n\n  useEnhancedEffect(() => {\n    ref.current = fn;\n  });\n\n  return useCallback(() => ref.current(), []) as any;\n}\n\nexport default useEventCallback;\n","/* eslint-disable no-return-assign */\n/* eslint-disable no-param-reassign */\n/* eslint-disable no-cond-assign */\n\n/**\n * 加速进入减速退出的 js 缓动函数实现\n *\n * 摘自 [js-easing-functions](https://github.com/bameyrick/js-easing-functions)\n *\n * @param elapsed 当前时间\n * @param initialValue 初始值\n * @param amountOfChange 值变化的量\n * @param duration 时长\n */\nfunction easeInOut(\n  elapsed: number,\n  initialValue: number,\n  amountOfChange: number,\n  duration: number,\n): number {\n  if ((elapsed /= duration / 2) < 1) {\n    return (amountOfChange / 2) * elapsed * elapsed * elapsed + initialValue;\n  }\n  return (\n    (amountOfChange / 2) * ((elapsed -= 2) * elapsed * elapsed + 2) +\n    initialValue\n  );\n}\n\nexport default easeInOut;\n","import easeInOut from './easeInOut';\n\n/**\n * 运行动画。\n *\n * @param start 开始数字\n * @param end 结束数字\n * @param duration 动画运行时长\n * @param callback 动画过程中每一帧执行的回调函数\n */\nfunction animate(\n  start: number,\n  end: number,\n  duration: number,\n  callback: (value: number) => void,\n) {\n  const startTime = Date.now();\n  const delta = end - start;\n\n  let rafId = -1;\n  const tick = () => {\n    const elapsed = Date.now() - startTime;\n    const value = easeInOut(elapsed, start, delta, duration); // 使用缓动函数求值\n\n    callback(value);\n\n    if (elapsed < duration) {\n      rafId = requestAnimationFrame(tick);\n    } else {\n      rafId = -1;\n    }\n  };\n\n  tick();\n\n  return () => rafId !== -1 && cancelAnimationFrame(rafId);\n}\n\nexport default animate;\n","import { useEffect, useCallback, useState, useMemo } from 'react';\nimport debounce from 'lodash/debounce';\nimport { DEBOUNCE_WAIT } from '../../constants';\nimport { TabListContextState } from '../TabListContext';\nimport useEventCallback from '../../helpers/useEventCallback';\nimport animate from '../../helpers/animate';\n\n/**\n * 使用滚动状态的hook\n * @param tabListRef 标签列表元素引用\n */\nfunction useScrollState(\n  tabListRef: React.RefObject<HTMLDivElement>,\n  tabListContextState: TabListContextState,\n) {\n  const [showScrollButtons, setShowScrollButtons] = useState(false); // 是否显示滚动按钮\n  const [isPrevDisabled, setIsPrevDisabled] = useState(true); // 向前滚动按钮是否禁用\n  const [isNextDisabled, setIsNextDisabled] = useState(false); // 向后滚动按钮是否禁用\n\n  /**\n   * 滚动指定距离\n   */\n  const scrollBy = useCallback(\n    (delta: number) => {\n      const tabList = tabListRef.current;\n\n      if (tabList) {\n        const { scrollLeft } = tabList;\n        const newScrollLeft = scrollLeft + delta;\n        animate(scrollLeft, newScrollLeft, 300, (value) => {\n          tabList.scrollLeft = value;\n        });\n      }\n    },\n    [tabListRef],\n  );\n\n  /**\n   * 更新滚动按钮的状态\n   */\n  const updateScrollButtonsState = useCallback(() => {\n    const tabList = tabListRef.current;\n\n    if (tabList) {\n      const { scrollWidth, clientWidth, scrollLeft } = tabList;\n      setShowScrollButtons(scrollWidth > clientWidth);\n      setIsPrevDisabled(scrollLeft < 1);\n      setIsNextDisabled(scrollWidth - clientWidth === scrollLeft);\n    }\n  }, [tabListRef]);\n\n  /**\n   * 滚动标签条以使选中的标签出现在视口中\n   */\n  const scrollSelectedTabIntoView = useEventCallback(() => {\n    const selectedTabId = tabListContextState.getTabs()[\n      tabListContextState.selectedIndex\n    ];\n    const selectedTab = document.querySelector(`#${selectedTabId}`);\n    const tabList = tabListRef.current;\n\n    if (selectedTab && tabList) {\n      const tabListRect = tabList.getBoundingClientRect();\n      const tabRect = selectedTab.getBoundingClientRect();\n\n      if (tabRect.left < tabListRect.left) {\n        scrollBy(tabRect.left - tabListRect.left);\n      } else if (tabRect.right > tabListRect.right) {\n        scrollBy(tabRect.right - tabListRect.right);\n      }\n    }\n  });\n\n  useEffect(() => {\n    updateScrollButtonsState();\n  }, [updateScrollButtonsState]);\n\n  useEffect(() => {\n    scrollSelectedTabIntoView();\n  }, [\n    scrollSelectedTabIntoView,\n    showScrollButtons,\n    tabListContextState.selectedIndex,\n  ]);\n\n  useEffect(() => {\n    const handleResize = debounce(() => {\n      updateScrollButtonsState();\n      scrollSelectedTabIntoView();\n    }, DEBOUNCE_WAIT);\n\n    window.addEventListener('resize', handleResize, false);\n\n    return () => {\n      handleResize.cancel();\n      window.removeEventListener('resize', handleResize, false);\n    };\n  }, [scrollSelectedTabIntoView, updateScrollButtonsState]);\n\n  /**\n   * 向前（左）滚动\n   */\n  const prev = useCallback(() => {\n    const tabList = tabListRef.current;\n\n    if (tabList) {\n      const { clientWidth } = tabList;\n      scrollBy(-clientWidth);\n    }\n  }, [scrollBy, tabListRef]);\n\n  /**\n   * 向后（右）滚动\n   */\n  const next = useCallback(() => {\n    const tabList = tabListRef.current;\n\n    if (tabList) {\n      const { clientWidth } = tabList;\n      scrollBy(clientWidth);\n    }\n  }, [scrollBy, tabListRef]);\n\n  // 处理标签列表的滚动事件\n  const handleTabListScroll = useMemo(\n    () => debounce(updateScrollButtonsState, DEBOUNCE_WAIT),\n    [updateScrollButtonsState],\n  );\n\n  useEffect(() => {\n    return () => handleTabListScroll.cancel();\n  }, [handleTabListScroll]);\n\n  return {\n    showScrollButtons,\n    isPrevDisabled,\n    isNextDisabled,\n    prev,\n    next,\n    onTabListScroll: handleTabListScroll,\n  };\n}\n\nexport default useScrollState;\n","import styled from 'styled-components';\n\nconst TabHeaderExtraContent = styled.div`\n  line-height: 48px;\n`;\n\nexport default TabHeaderExtraContent;\n","import styled from 'styled-components';\n\nconst TabList = styled.div`\n  flex: 1;\n  position: relative;\n  transition: transform 0.5s cubic-bezier(0.35, 0, 0.25, 1);\n  display: flex;\n\n  /* 隐藏滚动条 */\n  &::-webkit-scrollbar {\n    display: none; /* chrome, safari, opera */\n  }\n  scrollbar-width: none; /* firefox */\n  -ms-overflow-style: none; /* IE 10+, edge */\n  overflow: -moz-scrollbars-none; /* old firefox */\n\n  overflow-x: scroll;\n`;\n\nexport default TabList;\n","import React, { useRef } from 'react';\nimport TabHeaderWrapper from './TabHeaderWrapper';\nimport InkBar from '../InkBar';\nimport TabHeaderScrollButton from './TabHeaderScrollButton';\nimport NextIcon from './NextIcon';\nimport PrevIcon from './PrevIcon';\nimport useInkbarPositionSync from './useInkbarPositionSync';\nimport useScrollState from './useScrollState';\nimport TabHeaderExtraContent from './TabHeaderExtraContent';\nimport TabList from './TabList';\nimport { TabListContextState } from '../TabListContext';\n\ninterface Props {\n  children: React.ReactNode;\n  /**\n   * 在标签右侧添加附加内容。\n   */\n  extraContent?: React.ReactNode;\n  /**\n   * 设置不显示底部线条。默认为 `false`。\n   */\n  borderless?: boolean;\n  /**\n   * 设置当前选中的标签页。这是一个从 `0` 开始的索引，第一个标签页的索引为 `0`，第二个标签页的索引为 `1`，……\n   */\n  selectedIndex: number;\n  /**\n   * 标签列表上下文状态\n   */\n  tabListContextState: TabListContextState;\n}\n\nfunction InnerTabHeader({\n  children,\n  extraContent,\n  borderless,\n  tabListContextState,\n  ...rest\n}: Props) {\n  const tabListRef = useRef<HTMLDivElement>(null);\n  const inkBarRef = useRef<HTMLDivElement>(null);\n\n  useInkbarPositionSync(\n    inkBarRef,\n    tabListRef,\n    tabListContextState.selectedIndex,\n  );\n  const {\n    showScrollButtons,\n    isPrevDisabled,\n    isNextDisabled,\n    prev,\n    next,\n    onTabListScroll,\n  } = useScrollState(tabListRef, tabListContextState);\n\n  return (\n    <TabHeaderWrapper\n      className=\"sinoui-tab-header\"\n      role=\"tablist\"\n      borderless={borderless}\n      {...rest}\n    >\n      {showScrollButtons && (\n        <TabHeaderScrollButton disabled={isPrevDisabled} onClick={prev}>\n          <PrevIcon />\n        </TabHeaderScrollButton>\n      )}\n      <TabList\n        className=\"sinoui-tab-list\"\n        ref={tabListRef}\n        onScroll={onTabListScroll}\n      >\n        {children}\n        <InkBar ref={inkBarRef} data-testid=\"inkbar\" />\n      </TabList>\n      {showScrollButtons && (\n        <TabHeaderScrollButton disabled={isNextDisabled} onClick={next}>\n          <NextIcon />\n        </TabHeaderScrollButton>\n      )}\n      {extraContent ? (\n        <TabHeaderExtraContent className=\"sinoui-tab-header__extra-content\">\n          {extraContent}\n        </TabHeaderExtraContent>\n      ) : null}\n    </TabHeaderWrapper>\n  );\n}\n\nexport default InnerTabHeader;\n","import React, { useMemo } from 'react';\nimport TabHeaderContext from '../TabHeaderContext';\nimport useRefValue from '../../helpers/useRefValue';\nimport InnerTabHeader from './InnerTabHeader';\nimport TabListContext from '../TabListContext';\nimport useTabList from '../commons/useTabList';\n\ninterface Props {\n  children?: React.ReactNode;\n  /**\n   * 指定在密集模式下使用。\n   */\n  dense?: boolean;\n  /**\n   * 设置当前选中的标签页。这是一个从 `0` 开始的索引，第一个标签页的索引为 `0`，第二个标签页的索引为 `1`，……\n   */\n  selectedIndex: number;\n  /**\n   * 每次标签页切换时调用的事件处理器。这个函数的 `index` 参数是新的选中标签页索引，`lastIndex` 参数是变更之前选中的标签页索引，`event` 参数是引起页签切换的事件，可能是 `keydown` 或者 `click` 事件。如果 `index` 和 `lastIndex` 相同时，表示用户在当前选中的标签页上点击。\n   */\n  onSelect?: (\n    index: number,\n    lastIndex: number,\n    event: React.MouseEvent | React.KeyboardEvent,\n  ) => boolean | undefined | void;\n  /**\n   * 在标签右侧添加附加内容。\n   */\n  extraContent?: React.ReactNode;\n  /**\n   * 设置不显示底部线条。默认为 `false`。\n   */\n  borderless?: boolean;\n\n  /**\n   * 设置自定义的 css 类名\n   */\n  className?: string;\n\n  /**\n   * 设置自定义的 css 样式\n   */\n  style?: React.CSSProperties;\n}\n\n/**\n * 选项卡头部组件\n *\n */\nfunction TabHeader({\n  children,\n  dense,\n  selectedIndex = 0,\n  onSelect,\n  extraContent,\n  borderless,\n  ...rest\n}: Props) {\n  const tabList = useTabList(selectedIndex);\n\n  const onSelectRef = useRefValue(onSelect);\n\n  const context = useMemo(\n    () => ({\n      dense,\n      onSelect: (\n        tabIndex: number,\n        event: React.MouseEvent | React.KeyboardEvent,\n      ) => {\n        if (onSelectRef.current) {\n          onSelectRef.current(tabIndex, selectedIndex, event);\n        }\n      },\n    }),\n    [dense, onSelectRef, selectedIndex],\n  );\n\n  return (\n    <TabListContext.Provider value={tabList}>\n      <TabHeaderContext.Provider value={context}>\n        <InnerTabHeader\n          extraContent={extraContent}\n          borderless={borderless}\n          tabListContextState={tabList}\n          {...rest}\n        >\n          {children}\n        </InnerTabHeader>\n      </TabHeaderContext.Provider>\n    </TabListContext.Provider>\n  );\n}\n\nexport default TabHeader;\n","export const LEFT_KEY_CODE = 37; // 方向键左\n\nexport const TOP_KEY_CODE = 38; // 方向键上\n\nexport const RIGHT_KEY_CODE = 39; // 方向键右\n\nexport const BOTTOM_KEY_CODE = 40; // 方向键下\n\n/**\n * 防抖函数的延时时长\n */\nexport const DEBOUNCE_WAIT = 166; // 10 帧，166 毫秒\n","import { useRef } from 'react';\n\n/**\n * 使用同步的“变量”\n */\nfunction useRefValue<T>(value: T) {\n  const ref = useRef(value);\n\n  ref.current = value;\n\n  return ref;\n}\n\nexport default useRefValue;\n"],"sourceRoot":""}