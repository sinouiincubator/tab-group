{"version":3,"sources":["/Users/sinosoft/Documents/GitHub/tab-group/docs/apis/TabHeaderItem.mdx","/Users/sinosoft/Documents/GitHub/tab-group/src/components/TabHeaderContext.ts","/Users/sinosoft/Documents/GitHub/tab-group/src/components/TabListContext.ts","/Users/sinosoft/Documents/GitHub/tab-group/src/components/commons/useTabId.ts","/Users/sinosoft/Documents/GitHub/tab-group/src/components/commons/useTabRegister.ts","/Users/sinosoft/Documents/GitHub/tab-group/src/components/tab-header-item/TabHeaderItemWrapper.tsx","/Users/sinosoft/Documents/GitHub/tab-group/src/components/tab-header-item/TabHeaderItem.tsx","/Users/sinosoft/Documents/GitHub/tab-group/src/constants.ts","/Users/sinosoft/Documents/GitHub/tab-group/src/helpers/useRefValue.ts","/Users/sinosoft/Documents/GitHub/tab-group/src/helpers/uuid.ts"],"names":["layoutProps","MDXLayout","MDXContent","components","props","mdxType","of","TabHeaderItem","isMDXComponent","TabHeaderContext","React","createContext","TabListContext","useTabId","useMemo","uuid","useTabRegister","context","useContext","tabId","index","register","unregisterRef","useRefValue","unregister","undefined","useEffect","current","hoverCss","css","activeCss","theme","palette","primary","disabledCss","text","disabled","TabHeaderItemWrapper","styled","div","active","title","className","style","id","rest","tabListContext","tabHeaderContext","selectedIndex","isActive","rippleRef","useRipple","handleClick","useCallback","event","onSelect","handleKeyDown","keyCode","getTabs","getTabProps","tabs","RIGHT_KEY_CODE","BOTTOM_KEY_CODE","stopPropagation","preventDefault","nextTab","getNextTabIndex","i","length","LEFT_KEY_CODE","TOP_KEY_CODE","prevTab","getPrevTabIndex","classNames","onClick","ref","data-testid","role","tabIndex","aria-disabled","aria-selected","onKeyDown","DEBOUNCE_WAIT","value","useRef","count","reset"],"mappings":"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","file":"static/js/docs-apis-tab-header-item.c95170e5.js","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport { Playground, Props } from 'docz';\nimport TabHeaderItem from '../../src/components/tab-header-item/TabHeaderItem';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"tabheaderitem\"\n    }}>{`TabHeaderItem`}</h1>\n    <Props of={TabHeaderItem} mdxType=\"Props\" />\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","import React from 'react';\n\ninterface TabHeaderContextState {\n  /**\n   * 是否是密集模式\n   */\n  dense?: boolean;\n\n  /**\n   * 变更当前选项卡\n   */\n  onSelect: (\n    tabIndex: number,\n    event: React.MouseEvent | React.KeyboardEvent,\n  ) => void;\n}\n\n/**\n * 标签头部上下文\n */\nconst TabHeaderContext = React.createContext<TabHeaderContextState | null>(\n  null,\n);\n\nexport default TabHeaderContext;\n","import React from 'react';\n\nexport interface TabProps {\n  disabled?: boolean;\n}\n\nexport interface TabListContextState {\n  /**\n   * 注册标签页\n   */\n  register: (tabId: string, props: TabProps) => number;\n  /**\n   * 取消注册标签页\n   */\n  unregister: (tabId: string) => void;\n  /**\n   * 当前选中标签页的索引。索引从 0 开始。\n   */\n  selectedIndex: number;\n  /**\n   * 获取所有标签页的id\n   */\n  getTabs(): string[];\n  getTabProps(tabId: string): TabProps;\n}\n\n/**\n * 标签列表上下文\n */\nconst TabListContext = React.createContext<TabListContextState | null>(null);\n\nexport default TabListContext;\n","import { useMemo } from 'react';\nimport uuid from '../../helpers/uuid';\n\n/**\n * 生成标签id\n */\nfunction useTabId() {\n  const tabId = useMemo(uuid, []);\n\n  return tabId;\n}\n\nexport default useTabId;\n","import { useContext, useEffect } from 'react';\nimport useRefValue from '../../helpers/useRefValue';\nimport TabListContext, { TabProps } from '../TabListContext';\nimport useTabId from './useTabId';\n\n/**\n * 注册标签页\n */\n\nfunction useTabRegister(props?: TabProps): [string, number] {\n  const context = useContext(TabListContext);\n  const tabId = useTabId();\n  const index = context ? context.register(tabId, props || {}) : -1;\n  const unregisterRef = useRefValue(context ? context.unregister : undefined);\n\n  useEffect(() => {\n    const unregister = unregisterRef.current;\n\n    if (unregister) {\n      return () => unregister(tabId);\n    }\n    return undefined;\n  }, [tabId, unregisterRef]);\n\n  return [tabId, index];\n}\n\nexport default useTabRegister;\n","import styled, { css } from 'styled-components';\n\nconst hoverCss = css`\n  &:hover {\n    opacity: 1;\n  }\n`;\n\nconst activeCss = css`\n  color: ${(props) => props.theme.palette.primary[500]};\n  opacity: 1;\n`;\n\nconst disabledCss = css`\n  cursor: not-allowed;\n  color: ${(props) => props.theme.palette.text.disabled};\n`;\n\ninterface TabHeaderItemWrapperProps {\n  disabled?: boolean;\n  active?: boolean;\n}\n\nconst TabHeaderItemWrapper = styled.div<TabHeaderItemWrapperProps>`\n  height: 48px;\n  padding: 0 24px;\n  cursor: pointer;\n  box-sizing: border-box;\n  opacity: 0.6;\n  text-align: center;\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  white-space: nowrap; /* 不换行显示 */\n  color: ${(props) => props.theme.palette.text.primary};\n  outline: none;\n  user-select: none;\n  flex-shrink: 0;\n  letter-spacing: 1.25px;\n  font-weight: 500;\n  position: relative;\n  white-space: nowrap;\n  transition: opacity 0.25s cubic-bezier(0.4, 0, 0.2, 1),\n    color 0.25s cubic-bezier(0.4, 0, 0.2, 1);\n\n  ${(props) => !props.disabled && hoverCss};\n  ${(props) => props.disabled && disabledCss};\n  ${(props) => props.active && activeCss};\n`;\n\nexport default TabHeaderItemWrapper;\n","import React, { useContext, useCallback } from 'react';\nimport classNames from 'classnames';\nimport { useRipple } from '@sinoui/ripple';\nimport {\n  LEFT_KEY_CODE,\n  TOP_KEY_CODE,\n  RIGHT_KEY_CODE,\n  BOTTOM_KEY_CODE,\n} from '../../constants';\nimport TabHeaderItemWrapper from './TabHeaderItemWrapper';\nimport TabListContext from '../TabListContext';\nimport useTabRegister from '../commons/useTabRegister';\nimport TabHeaderContext from '../TabHeaderContext';\n\ninterface Props {\n  /**\n   * 标签标题\n   */\n  title: React.ReactNode;\n  /**\n   * 指定自定义样式名\n   */\n  className?: string;\n  /**\n   * 指定自定义样式\n   */\n  style?: React.CSSProperties;\n  /**\n   * 设置为 `true`，则禁用标签。\n   */\n  disabled?: boolean;\n  /**\n   * 指定标签页id\n   */\n  id?: string;\n}\n\n/**\n * 获取下一个可用的tab索引\n *\n * @param {number} selectedIndex\n * @param {string[]} tabs\n * @param {(tabId: string) => { disabled?: boolean }} getTabProps\n * @returns\n */\nfunction getNextTabIndex(\n  selectedIndex: number,\n  tabs: string[],\n  getTabProps: (tabId: string) => { disabled?: boolean },\n): number {\n  let i = selectedIndex + 1;\n  for (; i < tabs.length; i += 1) {\n    const tabId = tabs[i];\n    const tabDisabled = getTabProps(tabId).disabled;\n    if (!tabDisabled) {\n      return i;\n    }\n  }\n\n  if (i === tabs.length) {\n    return getNextTabIndex(-1, tabs, getTabProps);\n  }\n\n  return 0;\n}\n\n/**\n * 获取上一个可用标签页的索引\n *\n * @param {number} selectedIndex\n * @param {string[]} tabs\n * @param {(tabId: string) => { disabled?: boolean }} getTabProps\n * @returns\n */\nfunction getPrevTabIndex(\n  selectedIndex: number,\n  tabs: string[],\n  getTabProps: (tabId: string) => { disabled?: boolean },\n): number {\n  let i = selectedIndex - 1;\n  for (; i > 0; i -= 1) {\n    const tabId = tabs[i];\n    const tabDisabled = getTabProps(tabId).disabled;\n    if (!tabDisabled) {\n      return i;\n    }\n  }\n\n  if (selectedIndex === 0) {\n    return getPrevTabIndex(tabs.length, tabs, getTabProps);\n  }\n\n  return 0;\n}\n\n/**\n * 头部选项卡项组件\n */\nfunction TabHeaderItem({\n  title,\n  className,\n  style,\n  disabled,\n  id,\n  ...rest\n}: Props) {\n  const tabListContext = useContext(TabListContext);\n  const tabHeaderContext = useContext(TabHeaderContext);\n  const [tabId, index] = useTabRegister({ disabled });\n  const selectedIndex = tabListContext ? tabListContext.selectedIndex : -1;\n  const isActive = index === selectedIndex;\n\n  const rippleRef = useRipple<HTMLDivElement>(undefined, disabled);\n\n  const handleClick = useCallback(\n    (event: React.MouseEvent) => {\n      if (tabHeaderContext) {\n        tabHeaderContext.onSelect(index, event);\n      }\n    },\n    [index, tabHeaderContext],\n  );\n\n  const handleKeyDown = useCallback(\n    (event: React.KeyboardEvent) => {\n      const { keyCode } = event;\n      if (tabListContext && tabHeaderContext) {\n        const { getTabs, getTabProps } = tabListContext;\n        const tabs = getTabs();\n        if (keyCode === RIGHT_KEY_CODE || keyCode === BOTTOM_KEY_CODE) {\n          event.stopPropagation();\n          event.preventDefault();\n          const nextTab = getNextTabIndex(selectedIndex, tabs, getTabProps);\n          tabHeaderContext.onSelect(nextTab, event);\n        } else if (keyCode === LEFT_KEY_CODE || keyCode === TOP_KEY_CODE) {\n          event.stopPropagation();\n          event.preventDefault();\n          const prevTab = getPrevTabIndex(selectedIndex, tabs, getTabProps);\n          tabHeaderContext.onSelect(prevTab, event);\n        }\n      }\n    },\n    [selectedIndex, tabHeaderContext, tabListContext],\n  );\n\n  if (index === -1) {\n    return null;\n  }\n\n  return (\n    <TabHeaderItemWrapper\n      className={classNames('sinoui-tab', className, {\n        'sinoui-tab--active': isActive,\n        'sinoui-tab--disabled': disabled,\n      })}\n      style={style}\n      disabled={disabled}\n      active={isActive}\n      onClick={disabled ? undefined : handleClick}\n      ref={rippleRef}\n      data-testid={`tab-header-item-${index}`}\n      role=\"tab\"\n      tabIndex={isActive ? 0 : -1}\n      aria-disabled={disabled}\n      aria-selected={isActive}\n      onKeyDown={disabled ? undefined : handleKeyDown}\n      id={id || tabId}\n      {...rest}\n    >\n      {title}\n    </TabHeaderItemWrapper>\n  );\n}\n\nexport default TabHeaderItem;\n","export const LEFT_KEY_CODE = 37; // 方向键左\n\nexport const TOP_KEY_CODE = 38; // 方向键上\n\nexport const RIGHT_KEY_CODE = 39; // 方向键右\n\nexport const BOTTOM_KEY_CODE = 40; // 方向键下\n\n/**\n * 防抖函数的延时时长\n */\nexport const DEBOUNCE_WAIT = 166; // 10 帧，166 毫秒\n","import { useRef } from 'react';\n\n/**\n * 使用同步的“变量”\n */\nfunction useRefValue<T>(value: T) {\n  const ref = useRef(value);\n\n  ref.current = value;\n\n  return ref;\n}\n\nexport default useRefValue;\n","let count = 0;\n\n/**\n * 生成新的标签id\n */\nfunction uuid() {\n  const id = count;\n  count += 1;\n  return `tab-${id}`;\n}\n\n/**\n *  重置计数器\n */\nexport function reset() {\n  count = 0;\n}\n\nexport default uuid;\n"],"sourceRoot":""}